#!/bin/env python

#--------------------------------------------------------------------------------------------------#
# Name:   walletmgr                                                                                #
# Author: Randy Johnson                                                                            #
# Descr:  wrapper for mkstore, Oracle"s wallet management command.                                 #
# History:                                                                                         #
#                                                                                                  #
# Date       Ver. Who              Change Description                                              #
# ---------- ---- ---------------- --------------------------------------------------------------- #
# 08/13/2019 0.10 Randy Johnson    Initial write.                                                  #
# 08/14/2019 0.20 Randy Johnson    Added if system() not in ('Windows', 'win32') ...               #
# 08/14/2019 0.30 Randy Johnson    Replaced str.encode(password) + "\n" with password += '\n'      #
#                                  Added cache logic.                                              #
# 08/15/2019 0.40 Randy Johnson    Added logic to encrypt/decrypt the cache: encode() decode()     #
#                                  encode_creds(), decode_creds()                                  #
#                                  Added better error handling for invalid output from mkstore.    #
#                                  Added better error handling for incorrect password.             #
# 08/15/2019 0.50 Randy Johnson    Removed all changes from 0.30 and 0.40. Modified to work with   #
#                                  -listCredential output only.                                    #
# 08/17/2019 0.60 Randy Johnson    Added -a -c -d -p -s -w options. Also moved reporting logic to  #
#                                  their own functions and added better error checking and         #
#                                  handling. Also added the silent mode which supresses prompts    #
#                                  (except the prompt for the wallet password). Improved -h usage. #
#                                  Added handling for ORACLE_WALLET environment variable that      #
#                                  sets the non-default location of the wallet. Order of           #
#                                  precidence for the wallet location is as follows:               #
#                                    1 - Toplevel override is the -w option.                       #
#                                    2 - $ORACLE_WALLET                                            #
#                                    3 - $ORACLE_HOME/network/admin/wallet                         #
#                                    4 - Default is location of this location of this program +    #
#                                        /wallet. For example: ~oracle/dba/bin/wallet              #
# 08/18/2019 0.70 Randy Johnson    Added reporting for credenmtial attributes and -n option.       #
#                                  Fixed bug when checking for "Oracle Secret Store Tool"          #
#                                  Added a code to check for existance of key in report_passwords. #
#                                  Now if credential id's provided on the command line don't exist #
#                                  we will just quietly ignore them. Should we throw a warning?    #
# 08/19/2019 1.00 Randy Johnson    Final review complete. Moving to production status.             #
# 08/22/2019 1.10 Randy Johnson    Changed -n option to boolean from string. Moved the -n code up  #
#                                  above the prompt for password because a wallet password is not  #
#                                  required for this option.                                       #
# 08/24/2019 1.20 Andy Klock       Added -l option. Added compatability for Windows.               #
# 08/25/2019 1.30 Randy Johnson    Added find_keys() function that searches connect strings in the #
#                                  credentials for wildcarded strings on the command line and      #
#                                  returns the associated credential id's that match. This logic   #
#                                  is used for the default output (list credentials), delete       #
#                                  credential(s) and change password(s). If no search string is    #
#                                  specified the default of ALL credentials is assumed. Added      #
#                                  execute_wallet_cmd() to simplify and reduce repetitive code.    #
# 08/25/2019 1.31 Randy Johnson    Fixed find_keys(). Was only returning results from last arg[].  #
#                                  Moved find_keys() after block that adds a new credential.       #
# 08/26/2019 1.40 Randy Johnson    Removed the report_password() function and moved that lpogic    #
#                                  into the report_credentials() function. Added include_password  #
#                                  (boolean) into the parameters for report_credentials to switch  #
#                                  between standard credentials report and the password report.    #
# 08/29/2014 1.41 Randy Johnson    Modified the regex search to look for exact match unless * is   #
#                                  used. Changed keys to credkeys to avoid reserved word.          #
#--------------------------------------------------------------------------------------------------#
# --------------------------------------
# ---- Import Python Modules -----------
# --------------------------------------
from datetime     import datetime
from getpass      import getpass
from optparse     import OptionParser
from os           import access
from os           import environ
from os           import listdir
from os           import W_OK
from os           import R_OK
from os           import X_OK
from os.path      import isdir
from os.path      import join as pathjoin
from os.path      import split as pathsplit
from re           import search
from re           import IGNORECASE
from os.path      import basename
from signal       import signal
from subprocess   import PIPE
from subprocess   import Popen
from sys          import argv
from sys          import exit
from sys          import version_info
from platform     import system

# For handling termination in stdout pipe; ex: when you want to pipe
# the output to another program (like tail, less, ...
if system() not in ('Windows', 'win32'):
  from signal import SIGPIPE, SIG_DFL

# -------------------------------------------------
# ---- Function and Class Definitions ------------
# -------------------------------------------------

# ---------------------------------------------------------------------------
# Def : is_file_rw()
# Desc: Verifies that a file permissions are at least read write.
# Args: filepath -  Fully qualified filename.
# Retn: True     - file permissions are read and write by the current user.
#       False    - file is not read & write for the current user.
# ---------------------------------------------------------------------------
def is_file_rw(filepath):
  if access(filepath, R_OK) and access(filepath, W_OK):
    return True
  else:
    return False
# ---------------------------------------------------------------------------
# End is_file_rw()
# ---------------------------------------------------------------------------

# ---------------------------------------------------------------------------
# Def : is_file_rwx()
# Desc: Verifies that a file permissions are at least read write.
# Args: filepath = Fully qualified filename.
# Retn: True   - file permissions are read and write by the current user.
#       False  - file is not read & write for the current user.
# ---------------------------------------------------------------------------
def is_file_rwx(filepath):
  if access(filepath, R_OK) and access(filepath, W_OK) and access(filepath, X_OK):
    return True
  else:
    return False
# ---------------------------------------------------------------------------
# End is_file_rw()
# ---------------------------------------------------------------------------

# ---------------------------------------------------------------------------
# Def:  read_input()
# Desc: Prompts for input from the keyboard and returns values entered.
# Args: prompt - printed to the screen to prompt the user for input.
# Retn: value  - whatever is entered from the keyboard.
# ---------------------------------------------------------------------------
def read_input(prompt):
  prompt = "\n%s: " % prompt

  if(version_info[0] >= 3):
    return input(prompt)
  else:
    return raw_input(prompt)
# ---------------------------------------------------------------------------
# End read_input()
# ---------------------------------------------------------------------------

# Def:  execute_wallet_cmd()
# Desc: run mkstore -wrl {wallet_dir} -{parm} and return a list of output.
# Args: wallet - wallet directory name
#       password - wallet password
# Retn: final_output - list of output from mkstore command.
# ---------------------------------------------------------------------------
def execute_wallet_cmd(wallet, password, parms):
  output  = []
  rexpat  = r'^(\d+): (\w+) (\w+).*$'  # {nnn}: test_system{nnn} system
  cmdline = ["mkstore", "-wrl", wallet] + parms

  def get_line(proc):
    #line = proc.stdout.readline().encode('ascii').strip()
    line = proc.stdout.readline().strip()
    return line

  try:
    if(version_info[0] >= 3):
      if system() in ('Windows', 'win32'):
        proc = Popen(cmdline, stdin=PIPE, stdout=PIPE, stderr=PIPE, encoding='ascii', shell=True)
      else:
        proc = Popen(cmdline, stdin=PIPE, stdout=PIPE, stderr=PIPE, encoding='ascii')
    else:
      if system() in ('Windows', 'win32'):
        proc = Popen(cmdline, stdin=PIPE, stdout=PIPE, stderr=PIPE, shell=True)
      else:
        proc = Popen(cmdline, stdin=PIPE, stdout=PIPE, stderr=PIPE)
  except:
    print("Error calling mkstore: %s" % ' '.join(cmdline))
    exit(1)

  line = get_line(proc)
  if "Oracle Secret Store Tool" not in line:
    print("Error returned from mkstore: %s" % line)
    exit(1)
  else:
    # drain the rest of proc.stdout...
    while True:
      line = get_line(proc)
      if not line:
        break

  # Write the password to mkstore's stdin then read everything you get back...
  proc.stdin.write(password +'\n')
  proc.stdin.flush()
  while True:
    line = get_line(proc)
    # Check for password problem -- oracle.security.crypto.core.CipherException: Invalid padding string (or incorrect password)
    if 'Exception' in line or 'PKI-' in line:
      print("Error returned from mkstore: %s" % line)
      exit(1)
    if not line:
      break
    else:
      # save the output...
      output.append(line)
  proc.stdin.close()
  proc.terminate()
  proc.wait()

  return output
# ---------------------------------------------------------------------------
# End execute_wallet_cmd()
# ---------------------------------------------------------------------------

# ---------------------------------------------------------------------------
# Def:  wallet_list()
# Desc: run mkstore -wrl {wallet_dir} -list and return information from the
#       wallet
# Args: wallet    - wallet directory name
#       password  - wallet password
# Retn: creds     - dictionary of index, connect string, username
# ---------------------------------------------------------------------------
def wallet_list(wallet, password):
  output   = []
  creds    = {}
  rexpat   = r'^([a-z|A-Z]+.[a-z|A-Z]+.[a-z|A-Z]+.\D+)(\d+).*$'   # searching for 'oracle.security.client.{connect_string|username|password}nnn'

  output = execute_wallet_cmd(wallet, password, ['-list'])

  # Now we'll get the results of the query...
  for line in output:
    found = search(rexpat, line)
    if found:
      try:
       credstr  = ''.join(found.groups())
       credtype = found.groups()[0].split('.')[3]
       idx      = found.groups()[1]
      except:
        print("Unexpected results from -list: %s" % found.groups())
        exit(1)
      try:
        idx = int(idx.strip())
      except:
        print("Cannot convert string to int: %s" % key)
        print("  Full string: %s" % line)
        exit(1)
      if idx not in creds:
        creds[idx] = {}
      creds[idx][credtype] = credstr
  
  return creds
# ---------------------------------------------------------------------------
# End wallet_list()
# ---------------------------------------------------------------------------

# ---------------------------------------------------------------------------
# Def:  wallet_list_credential()
# Desc: run mkstore -wrl {wallet_dir} -listCredentials and return a dictionary
#       of information returned from the wallet.
# Args: wallet    - wallet directory name
#       password  - wallet password
# Retn: creds     - dictionary of index, connect string, username
# ---------------------------------------------------------------------------
def wallet_list_credential(wallet, password):
  creds  = {}
  rexpat = r'^(\d+): (\w+) (\w+).*$'  # {nnn}: test_system{nnn} system

  output = execute_wallet_cmd(wallet, password, ['-listCredential'])
  for line in output:
    found = search(rexpat, line)
    if found:
      try:
        idx,connstr,username = found.groups()[0:3]
      except:
        print("Unexpected results from -list: %s" % found.groups())
        exit(1)
      try:
        idx = int(idx.strip())
      except:
        print("Cannot convert string to int: %s" % key)
        print("  Full string: %s" % line)
        exit(1)
      if idx not in creds:
        creds[idx] = {}
      creds[idx]['Connect String'] = connstr
      creds[idx]['User Name']      = username
  
  return creds
# ---------------------------------------------------------------------------
# End wallet_list_credential()
# ---------------------------------------------------------------------------

# ---------------------------------------------------------------------------
# Def:  cred_details()
# Desc: run mkstore -wrl {wallet_dir} -viewEntry {my_entry} and return
#       output...
# Args: wallet    - wallet directory name
#       password  - wallet password
#       Parm      - mkstore parameter to execute
# Retn: output    - everything mkstore prints to stdout|stderr after the
#                   password accepted.
# ---------------------------------------------------------------------------
def cred_details(wallet, password, entry):
  value = ''

  output = execute_wallet_cmd(wallet, password, ['-viewEntry', entry])
  try:
    value = output[1].split('=')[1].strip()
  except:
    print("Cannot parse value returned by -viewEvent: %s" % output[1])
    exit(1)
  
  return value
# ---------------------------------------------------------------------------
# End cred_details()
# ---------------------------------------------------------------------------

# ---------------------------------------------------------------------------
# Def:  change_password(wallet, password, creds, credkeys, newpass)
# Desc: run mkstore -wrl {wallet_dir} -modifyCredential N102 scott
#       newpassword and return information from the wallet
# Args: wallet    - wallet directory name
#       password  - wallet password
#       Parm      - mkstore parameter to execute
# Retn: output    - everything mkstore prints to stdout|stderr after the
#                   password accepted.
# ---------------------------------------------------------------------------
def change_password(wallet, password, creds, credkeys, newpass):
  output = []
  
  for key in credkeys:
    connstr = creds[key]['Connect String']
    username = creds[key]['User Name']
    output.append(execute_wallet_cmd(wallet, password, ['-modifyCredential', connstr, username, newpass]))
  
  return output
# ---------------------------------------------------------------------------
# End change_password()
# ---------------------------------------------------------------------------

# ---------------------------------------------------------------------------
# Def:  add_credential(wallet, password, connstr, username, passwd)
# Desc: mkstore -wrl {wallet_dir} -createCredential N102 scott passwd
#       and returns information from the wallet
# Args: wallet    - wallet directory name
#       password  - wallet password
#       connstr   - Connect string of new credential
#       username  - User name for new credential
#       passwd    - Password for new credential
# Retn: output    - everything mkstore prints to stdout|stderr after the
#                   password accepted.
# ---------------------------------------------------------------------------
def add_credential(wallet, password, connstr, username, passwd):
  return execute_wallet_cmd(wallet, password, ['-createCredential', connstr, username, passwd])

# ---------------------------------------------------------------------------
# End add_credential()
# ---------------------------------------------------------------------------

# ---------------------------------------------------------------------------
# Def:  delete_credentials(wallet, password, connstr, username, passwd)
# Desc: mkstore -wrl {wallet_dir} -createCredential N102 scott passwd
#       and returns information from the wallet
# Args: wallet    - wallet directory name
#       password  - wallet password
#       connstr   - Connect string of new credential
#       username  - User name for new credential
#       passwd    - Password for new credential
# Retn: output    - everything mkstore prints to stdout|stderr after the
#                   password accepted.
# ---------------------------------------------------------------------------
def delete_credentials(wallet, password, creds, credkeys):
  output  = []
  tns     = []

  for key in sorted(credkeys):
    if key in creds:
      tns.append(creds[key]['Connect String'])
    else:
      print("\nKey not found in wallet and will be ignored: %s" % key)

  for connstr in tns:
    cmdline = ["mkstore", "-wrl", wallet, '-deleteCredential', connstr]
    output.append(execute_wallet_cmd(wallet, password, ['-deleteCredential', connstr]))

  return output
# ---------------------------------------------------------------------------
# End delete_credentials()
# ---------------------------------------------------------------------------

# ---------------------------------------------------------------------------
# Def:  find_credkeys(creds)
# Desc: Searches for a string in Connect String and returns credential id
#       (key)
# Args: creds - This is a dictionary structure keyed on the credential id
# Retn: list
# ---------------------------------------------------------------------------
def find_credkeys(creds):
  credkeys    = []
  search_list = []

  if args != []:
    search_list = ','.join(args)
    search_list = [search_string.strip() for search_string in search_list.split(',')]

  if search_list == []:
    credkeys = sorted(creds)
  else:
    for ss in search_list:
      if ss == '*':
        return sorted(creds)
      # Build regular expression...
      rexpat = ss.replace('*', '.*')
      rexpat = r'(^' + rexpat + '$)'

      for key in sorted(creds):
        found = search(rexpat, creds[key]["Connect String"],IGNORECASE)
        if found:
          credkeys.append(key)

    # remove duplicates...
    return sorted(list(set().union(credkeys, credkeys)))

  return credkeys
# ---------------------------------------------------------------------------
# End find_credkeys()
# ---------------------------------------------------------------------------

# ---------------------------------------------------------------------------
# Def:  report_credentials()
# Desc: Generate a report containing credential id, connect string, and
#       user name.
# Args: creds - This is a dictionary structure keye'd on the credential id
#               and containing the connect string and user name.
# Retn: <none>
# ---------------------------------------------------------------------------
def report_credentials(creds, credkeys, include_password=False):

  if include_password:
    attrs = wallet_list(wallet, password)
    print("\n%-4s %-20s %-20s %-30s" % ('ID', 'Connect String', 'User Name','Password'))
    print("%-4s %-20s %-20s %-30s" % ('----', '--------------------','--------------------','------------------------------'))  
    for key in sorted(credkeys):
      if key in attrs:
        value = cred_details(wallet, password, attrs[key]['password'])
        print("%-4s %-20s %-20s %-30s" % (key,creds[key]['Connect String'],creds[key]['User Name'],value))
  else:
    print("\n%-4s %-20s %-30s" % ('ID', 'Connect String', 'User Name'))
    print("%-4s %-20s %-30s" % ('----', '--------------------','--------------------'))
    for key in credkeys:
      print("%-4s %-20s %-20s" % (key, creds[key]['Connect String'], creds[key]['User Name']))
# ---------------------------------------------------------------------------
# End report_credentials()
# ---------------------------------------------------------------------------

# ---------------------------------------------------------------------------
# Def:  report_credendial_attrs()
# Desc: Generate a report containing the internal attributes for each
#       credential. For example:
#         oracle.security.client.connect_string1
#         oracle.security.client.connect_string2
#         ...
#         oracle.security.client.password1
#         oracle.security.client.password2
#         ...
#         oracle.security.client.username1
#         oracle.security.client.username2
#         ...
# Args: creds - This is a dictionary structure keye'd on the credential id
#               and containing the long credkeys for each credential entry.
# Retn: <none>
# ---------------------------------------------------------------------------
def report_credendial_attrs(attrs):
  print("\nCredential Attributes...")
  for key in sorted(attrs):
    for key2 in sorted(attrs[key]):
      print("ID: %-4s Type: %-20s Complete String: %-20s" % (key, key2, attrs[key][key2]))
# ---------------------------------------------------------------------------
# End report_credendial_attrs()
# ---------------------------------------------------------------------------


# --------------------------------------
# ---- Main Program --------------------
# --------------------------------------
if (__name__ == "__main__"):
  cmd_name       = basename(argv[0]).split(".")[0]
  cmd_descr      = "Wallet Manager"
  versn          = "1.41"
  versn_date     = "Thu Aug 29 13:02:36 CDT 2019"
  dev_state      = "Production"
  banner         = cmd_descr + ": Release " + versn + " "  + dev_state + ". Last updated: " + versn_date
  now            = datetime.now()
  manifest       = ['cwallet.sso','ewallet.p12']
  creds          = {}
  credkeys       = []
  home_dir       = pathsplit(pathsplit(argv[0])[0])[0]

  usage  =  "%s [options] [params]"  % cmd_name
  usage += "\n\n%s"         % cmd_descr
  usage += "\n------------------------------------------------------------------------------"
  usage += "\nWrapper for Oracle's mkstore comamnd."
  usage += "\n"
  usage += "\nReport credentials..."
  usage += "\n> %s" % cmd_name
  usage += "\n"
  usage += "\nID   Connect String       User Name"
  usage += "\n---- -------------------- --------------------"
  usage += "\n1    finprd               system"
  usage += "\n2    hrprd                system"
  usage += "\n3    findev               system"
  usage += "\n4    hrdev                system"
  usage += "\n5    biprd                system"
  usage += "\n6    bidev                system"
  usage += "\n"
  usage += "\n> %s *dev" % cmd_name
  usage += "\nID   Connect String       User Name"
  usage += "\n---- -------------------- --------------------"
  usage += "\n3    findev               system"
  usage += "\n4    hrdev                system"
  usage += "\n6    bidev                system"
  usage += "\n"
  usage += "\nAdd new credential..."
  usage += "\n%s -a mydb system welcome1"      % cmd_name
  usage += "\n%s -a mydb system welcome1 -s"   % cmd_name
  usage += "\n"
  usage += "\nChange passwords..."
  usage += "\n%s -c welcome99 findev"          % cmd_name
  usage += "\n%s -c welcome99 findev,hrdev"    % cmd_name
  usage += "\n%s -c welcome99 '*dev'"          % cmd_name
  usage += "\n%s -c welcome99 \*dev"           % cmd_name
  usage += "\n%s -c welcome99 bi\*,hr\* -s"    % cmd_name
  usage += "\n"
  usage += "\nDelete credentials..."
  usage += "\n%s -d findev"                    % cmd_name
  usage += "\n%s -d findev,hrdev"              % cmd_name
  usage += "\n%s -d '*dev'"                    % cmd_name
  usage += "\n%s -d \*dev"                     % cmd_name
  usage += "\n%s -d bi\*,hr\* -s"              % cmd_name
  usage += "\n"
  usage += "\nList credential passwords..."
  usage += "\n%s -p findev"                    % cmd_name
  usage += "\n%s -p findev,hrdev"              % cmd_name
  usage += "\n%s -p '*dev'"                    % cmd_name
  usage += "\n%s -p \*dev"                     % cmd_name
  usage += "\n%s -p bi\*,hr\* -s"              % cmd_name
  usage += "\n"
  usage += "\nSpecify a wallet..."
  usage += "\n%s -w /u01/oracle/product/18c/dbhome_1/network/admin/wallet" % cmd_name

  arg_parser = OptionParser(usage)

  arg_parser.add_option("-a",  dest="addcred",    action="store_true", default=False,           help="add a new credential")
  arg_parser.add_option("-c",  dest="newpass",                         default='',    type=str, help="change password for credentials listed by index")
  arg_parser.add_option("-d",  dest="delcred",    action="store_true", default=False,           help="delete credentials (confirmation required)")
  arg_parser.add_option("-n",  dest="newwallet",  action="store_true", default=False,           help="create a new wallet")
  arg_parser.add_option("-p",  dest="listpass",   action="store_true", default=False,           help="report passwords")
  arg_parser.add_option("-s",  dest="silent",     action="store_true", default=False,           help="silent (no prompts, no confirmations)")
  arg_parser.add_option("-w",  dest="wallet",                          default='',    type=str, help="wallet (directory containing the credentials)")
  arg_parser.add_option("--v", dest="versn",      action="store_true", default=False,           help="print version info.")

  # Parse command line arguments
  options, args = arg_parser.parse_args()

  addcred   = options.addcred
  delcred   = options.delcred
  newpass   = options.newpass
  listpass  = options.listpass
  newwallet = options.newwallet
  silent    = options.silent
  versn     = options.versn
  wallet    = options.wallet

  if versn:
    print("\n%s" % banner)
    exit(0)

  # -a -c and -d options are mutually exclusive
  # ---------------------------------------------
  if addcred and (newpass or delcred or newwallet):
    print("The -a option cannot be used with -c -d -n options.")
    exit(0)
  elif newpass and (addcred or delcred or newwallet):
    print("The -c option cannot be used with -a -d -n options.")
    exit(0)
  elif delcred and (addcred or newpass or newwallet):
    print("The -d option cannot be used with -a -c -n options.")
    exit(0)
  elif newwallet and (addcred or newpass or delcred):
    print("The -c option cannot be used with -a -c -d options.")
    exit(0)
  elif newwallet and silent:
    print("The -n option cannot be used with -s option.")
    exit(0)
  if newpass:
    listpass = True

  # Get the wallet variable...
  if not wallet:
    if 'ORACLE_WALLET' in environ:
      wallet = environ['ORACLE_WALLET']
    elif 'ORACLE_HOME' in environ:
      wallet = pathjoin(environ['ORACLE_HOME'], 'network', 'admin', 'wallet')
    else:
      wallet = pathjoin(home_dir, 'wallet')

  # Create a new wallet...
  if newwallet:
    if len(args) >= 1:
      wallet = args[0]
    else:
      wallet = 'wallet'
    print("\nTo create a new wallet, run the following command and enter your wallet password when prompted:")
    print("\n   mkstore -wrl %s -create" % wallet)
    exit()

  # Get the wallet password from keyboard....
  password = getpass("\nEnter wallet password: ")
  if password.strip() == '':
    print("\nWallet password required: %s" % password)
    exit(1)

  # Validate wallet...
  if isdir(wallet):
    perms = is_file_rwx(wallet)
    if not perms:
      print("\nDirectory permissions for wallet must be read+write+execute for current user.")
      exit(1)
    wallet_contents = listdir(wallet)
    for item in manifest:
      if item not in wallet_contents:
        print("\nRequired file missing from wallet: %s" % item)
        print("\n  Wallet  : %s" % wallet)
        print("\n  Required: %s" % manifest)
        exit(1)
    for item in manifest:
      perms = is_file_rw(pathjoin(wallet, item))
      if not perms:
        print("\nPermissions for file must be read+write: %s" % pathjoin(wallet,item))
        exit(1)
  else:
    print("\nInvalid wallet: %s" % wallet)
    wallet = read_input("Enter wallet")
    if not isdir(wallet):
      print("\nInvalid wallet: %s" % wallet)
      exit(1)

  # Extract basic info that is used for most things.
  # --------------------------------------------------------
  creds = wallet_list_credential(wallet, password)
  attrs = wallet_list(wallet, password)

  # Adda new credential...
  if addcred:
    response = 'N'
    if len(args) != 3:
      print("\nWhen adding a new credential, 3 parameters are required.")
      print("  1) connect string")
      print("  2) username")
      print("  3) password")
      print("\nFor example: %s -a my_database system welcome1" % cmd_name)
      exit(1)
    else:
      connstr,username,passwd = args
      if not silent:
        print("\nAdd new credential defined as follows:")
        print("\n  Connect String: %s" % connstr)
        print("       User Name: %s" % username)
        print("        Password: %s" % passwd)
        response = read_input("Continue? (y/N)")
      if silent or response.upper()[0] == 'Y':
        output = add_credential(wallet, password, connstr, username, passwd)
        exit()
      else:
        print("\nAdd credential cancelled.")
        exit()

  # print a report of key, connect string, user name
  credkeys = find_credkeys(creds)
  report_credentials(creds, credkeys, listpass)

  # Delete credential(s) specified by their numeric key.
  if delcred:
    if silent:
      output = delete_credentials(wallet, password, creds, credkeys)
      exit()
    else:
      print("\nThe following credentials are flagged for deletion: %s" % credkeys)
      response = read_input("Continue? (y/N)")
      if response.upper()[0] == 'Y':
        output = delete_credentials(wallet, password, creds, credkeys)
        exit()
      else:
        print("\nDelete credentials cancelled.")
        exit()

  # Change password for credential(s) specified by their numeric key.
  if newpass != '':
    if silent:
      out = change_password(wallet, password, creds, credkeys, newpass)
      exit()
    else:
      print("\nChanging password for the following credentials: %s" % credkeys)
      response = read_input("Continue? (y/N)")
      if response.upper()[0] == 'Y':
        out = change_password(wallet, password, creds, credkeys, newpass)

      # Report New Passwords...
      report_credentials(creds, credkeys, listpass)
  exit(0)

