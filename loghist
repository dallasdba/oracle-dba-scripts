#!/bin/env python

#--------------------------------------------------------------------------------------------------#
# Name:   loghist                                                                                  #
# Author: Randy Johnson                                                                            #
# Descr:  Reports archivelog history by instance.                                                  #
#                                                                                                  #
#                                                                                                  #
# History:                                                                                         #
#                                                                                                  #
# Date       Ver. Who              Change Description                                              #
# ---------- ---- ---------------- -------------------------------------------------------------   #
# 08/28/2017 1.00 Randy Johnson    Initial write.                                                  #
# 06/12/2020 1.01 Randy Johnson    Reset header formatting.                                        #
#--------------------------------------------------------------------------------------------------#

# --------------------------------------
# ---- Import Python Modules -----------
# --------------------------------------
from optparse     import OptionParser
from os           import environ
from os.path      import basename
from signal       import SIG_DFL
from signal       import SIGPIPE
from signal       import signal
from sys          import argv
from sys          import exit
from sys          import version_info
from Oracle       import ParseConnectString
from Oracle       import RunSqlplus
from Oracle       import SetOracleEnv

# --------------------------------------
# ---- Main Program --------------------
# --------------------------------------
if (__name__ == '__main__'):
  Cmd            = basename(argv[0]).split('.')[0]
  CmdDesc        = 'Log History'
  Version        = '1.01'
  VersionDate    = 'Fri Jun 12 22:00:50 CDT 2020'
  DevState       = 'Production'
  Banner         = CmdDesc + ': Release ' + Version + ' '  + DevState + '. Last updated: ' + VersionDate
  Sql            = ''
  SqlHeader      = '/***** ' + CmdDesc.upper() + ' *****/'
  ErrChk         = False
  ArgParser      = OptionParser()
  InStr          = ''
  TnsName        = ''
  Username       = ''
  Password       = ''
  ConnStr        = ''
  
  # For handling termination in stdout pipe; ex: when you run: oerrdump | head
  signal(SIGPIPE, SIG_DFL)

  # Process command line options
  # ----------------------------------
  Usage  =  '%s [options]'  % Cmd
  Usage += '\n\n%s'         % CmdDesc
  Usage += '\n-------------------------------------------------------------------------------'
  Usage += '\nReport archivelog history by instance.'
  ArgParser = OptionParser(Usage)

  ArgParser.add_option('--s', dest='Show',     action='store_true', default=False,           help="print SQL query.")
  ArgParser.add_option('--v', dest='ShowVer',  action='store_true', default=False,           help="print version info.")

  # Parse command line arguments
  Options, args = ArgParser.parse_args()

  Show      = Options.Show
  ShowVer   = Options.ShowVer

  if (ShowVer):
    print('\n%s' % Banner)
    exit()

  Sql += "column day        format a15               heading 'Date'\n"
  Sql += "column dg_date    format a15               heading 'Date'\n"
  Sql += "column start_date format a15               heading 'Start Date'\n"
  Sql += "column start_time format a15               heading 'Start Time'\n"
  Sql += "column mbytes     format 999,999,999,999   heading 'Megabytes'\n"
  Sql += "column num_logs   format 999,999,999       heading '#Logs'\n"
  Sql += "column thread#    format 9                 heading 'Thread'\n"
  Sql += "\n"
  Sql += "prompt\n"
  Sql += "prompt By Hour by Node:\n"
  Sql += "  SELECT " + SqlHeader + "\n"
  Sql += "         log_hist.start_date\n"
  Sql += "       , log_hist.start_time\n"
  Sql += "       , log_hist.num_logs\n"
  Sql += "       , ROUND(log_hist.num_logs * (vl.Bytes / (1024 * 1024)), 2) AS mbytes\n"
  Sql += "    FROM (   SELECT " + SqlHeader + "\n"
  Sql += "                    TO_CHAR(vlh.First_time, 'YYYY-MM-DD') AS start_date\n"
  Sql += "                  , TO_CHAR(vlh.First_time, 'HH24') || ':00' AS start_time\n"
  Sql += "                  , COUNT(vlh.thread#) num_logs\n"
  Sql += "               FROM v$log_History vlh\n"
  Sql += "           GROUP BY TO_CHAR(vlh.First_time, 'YYYY-MM-DD')\n"
  Sql += "                  , TO_CHAR(vlh.First_time, 'HH24') || ':00'\n"
  Sql += "         ) log_hist\n"
  Sql += "       , v$log vl\n"
  Sql += "       , v$database vdb\n"
  Sql += "   WHERE vl.group# = 1\n"
  Sql += "ORDER BY log_hist.start_date\n"
  Sql += "       , log_hist.start_time;\n"
  Sql += "\n" 
  Sql += "prompt\n"
  Sql += "prompt By Hour by Node:\n"
  Sql += "SELECT " + SqlHeader + "\n"
  Sql += "       log_hist.start_date\n"
  Sql += "     , log_hist.start_time\n"
  Sql += "     , log_hist.thread#\n"
  Sql += "     , log_hist.num_logs\n"
  Sql += "     , ROUND(num_logs * (vl.Bytes / (1024 * 1024)), 2) AS mbytes\n"
  Sql += "  FROM (  SELECT " + SqlHeader + "\n"
  Sql += "                 TO_CHAR(vlh.First_time, 'YYYY-MM-DD') AS start_date\n"
  Sql += "               , TO_CHAR(vlh.First_time, 'HH24') || ':00' AS start_time\n"
  Sql += "               , thread#\n"
  Sql += "               , COUNT(vlh.thread#) num_logs\n"
  Sql += "            FROM v$log_History vlh\n"
  Sql += "        GROUP BY TO_CHAR(vlh.First_time, 'YYYY-MM-DD')\n"
  Sql += "               , TO_CHAR(vlh.First_time, 'HH24') || ':00'\n"
  Sql += "               , thread#\n"
  Sql += "       ) log_hist\n"
  Sql += "     , v$log vl\n"
  Sql += "     , v$database vdb\n"
  Sql += "           WHERE vl.group# = 1\n"
  Sql += "        ORDER BY log_hist.start_date\n"
  Sql += "               , log_hist.start_time\n"
  Sql += "               , log_hist.thread#;\n"
  Sql += " \n"
  Sql += "prompt\n"
  Sql += "prompt By Day:\n"
  Sql += "  SELECT " + SqlHeader + "\n"
  Sql += "         start_date\n"
  Sql += "       , num_logs\n"
  Sql += "       , ROUND(num_logs * (vl.Bytes / (1024 * 1024)), 2) AS mbytes\n"
  Sql += "    FROM (   SELECT " + SqlHeader + "\n"
  Sql += "                    TO_CHAR(vlh.First_time, 'YYYY-MM-DD') AS start_date\n"
  Sql += "                  , COUNT(vlh.thread#) num_logs\n"
  Sql += "               FROM v$log_History vlh\n"
  Sql += "           GROUP BY TO_CHAR(vlh.First_time, 'YYYY-MM-DD')\n"
  Sql += "         ) log_hist\n"
  Sql += "       , v$log vl\n"
  Sql += "       , v$database vdb\n"
  Sql += "   WHERE vl.group# = 1\n"
  Sql += "ORDER BY log_hist.start_date;\n"
  Sql += " \n"
  Sql += "prompt\n"
  Sql += "prompt By Day By Node:\n"
  Sql += "   SELECT " + SqlHeader + "\n"
  Sql += "          log_hist.start_date\n"
  Sql += "        , log_hist.thread#\n"
  Sql += "        , log_hist.num_logs\n"
  Sql += "        , ROUND(num_logs * (vl.Bytes / (1024 * 1024)), 2) AS mbytes\n"
  Sql += "     FROM (  SELECT " + SqlHeader + "\n"
  Sql += "                    TO_CHAR(vlh.First_time, 'YYYY-MM-DD') AS start_date, vlh.thread#\n"
  Sql += "                  , COUNT(vlh.thread#) num_logs\n"
  Sql += "               FROM v$log_History vlh\n"
  Sql += "           GROUP BY TO_CHAR(vlh.First_time, 'YYYY-MM-DD')\n"
  Sql += "                  , vlh.thread#\n"
  Sql += "          ) log_hist\n"
  Sql += "        , v$log vl\n"
  Sql += "        , v$database vdb\n"
  Sql += "    WHERE vl.group# = 1\n"
  Sql += " ORDER BY log_Hist.start_date, thread#;\n"
  Sql += " \n"
  Sql += "prompt\n"
  Sql += "prompt Heat Map:\n"
  Sql += "  SELECT " + SqlHeader + "\n"
  Sql += "         TO_CHAR(first_time,'YYYY-MM-DD') day\n"
  Sql += "        ,thread#\n"
  Sql += "        ,TO_CHAR(SUM(DECODE(TO_CHAR(FIRST_TIME,'HH24'),'00',1,0)),'9999') \" 12AM\"\n"
  Sql += "        ,TO_CHAR(SUM(DECODE(TO_CHAR(FIRST_TIME,'HH24'),'01',1,0)),'9999') \" 01AM\"\n"
  Sql += "        ,TO_CHAR(SUM(DECODE(TO_CHAR(FIRST_TIME,'HH24'),'02',1,0)),'9999') \" 02AM\"\n"
  Sql += "        ,TO_CHAR(SUM(DECODE(TO_CHAR(FIRST_TIME,'HH24'),'03',1,0)),'9999') \" 03AM\"\n"
  Sql += "        ,TO_CHAR(SUM(DECODE(TO_CHAR(FIRST_TIME,'HH24'),'04',1,0)),'9999') \" 04AM\"\n"
  Sql += "        ,TO_CHAR(SUM(DECODE(TO_CHAR(FIRST_TIME,'HH24'),'05',1,0)),'9999') \" 05AM\"\n"
  Sql += "        ,TO_CHAR(SUM(DECODE(TO_CHAR(FIRST_TIME,'HH24'),'06',1,0)),'9999') \" 06AM\"\n"
  Sql += "        ,TO_CHAR(SUM(DECODE(TO_CHAR(FIRST_TIME,'HH24'),'07',1,0)),'9999') \" 07AM\"\n"
  Sql += "        ,TO_CHAR(SUM(DECODE(TO_CHAR(FIRST_TIME,'HH24'),'08',1,0)),'9999') \" 08AM\"\n"
  Sql += "        ,TO_CHAR(SUM(DECODE(TO_CHAR(FIRST_TIME,'HH24'),'09',1,0)),'9999') \" 09AM\"\n"
  Sql += "        ,TO_CHAR(SUM(DECODE(TO_CHAR(FIRST_TIME,'HH24'),'10',1,0)),'9999') \" 10AM\"\n"
  Sql += "        ,TO_CHAR(SUM(DECODE(TO_CHAR(FIRST_TIME,'HH24'),'11',1,0)),'9999') \" 11AM\"\n"
  Sql += "        ,TO_CHAR(SUM(DECODE(TO_CHAR(FIRST_TIME,'HH24'),'12',1,0)),'9999') \" 12PM\"\n"
  Sql += "        ,TO_CHAR(SUM(DECODE(TO_CHAR(FIRST_TIME,'HH24'),'13',1,0)),'9999') \"  1PM\"\n"
  Sql += "        ,TO_CHAR(SUM(DECODE(TO_CHAR(FIRST_TIME,'HH24'),'14',1,0)),'9999') \"  2PM\"\n"
  Sql += "        ,TO_CHAR(SUM(DECODE(TO_CHAR(FIRST_TIME,'HH24'),'15',1,0)),'9999') \"  3PM\"\n"
  Sql += "        ,TO_CHAR(SUM(DECODE(TO_CHAR(FIRST_TIME,'HH24'),'16',1,0)),'9999') \"  4PM\"\n"
  Sql += "        ,TO_CHAR(SUM(DECODE(TO_CHAR(FIRST_TIME,'HH24'),'17',1,0)),'9999') \"  5PM\"\n"
  Sql += "        ,TO_CHAR(SUM(DECODE(TO_CHAR(FIRST_TIME,'HH24'),'18',1,0)),'9999') \"  6PM\"\n"
  Sql += "        ,TO_CHAR(SUM(DECODE(TO_CHAR(FIRST_TIME,'HH24'),'19',1,0)),'9999') \"  7PM\"\n"
  Sql += "        ,TO_CHAR(SUM(DECODE(TO_CHAR(FIRST_TIME,'HH24'),'20',1,0)),'9999') \"  8PM\"\n"
  Sql += "        ,TO_CHAR(SUM(DECODE(TO_CHAR(FIRST_TIME,'HH24'),'21',1,0)),'9999') \"  9PM\"\n"
  Sql += "        ,TO_CHAR(SUM(DECODE(TO_CHAR(FIRST_TIME,'HH24'),'22',1,0)),'9999') \" 10PM\"\n"
  Sql += "        ,TO_CHAR(SUM(DECODE(TO_CHAR(FIRST_TIME,'HH24'),'23',1,0)),'9999') \" 11PM\"\n"
  Sql += "     FROM v$log_history\n"
  Sql += " GROUP BY TO_CHAR(first_time,'YYYY-MM-DD'), thread#\n"
  Sql += " ORDER BY 1,2;"
 
  Sql = Sql.strip()

  if(Show):
    print('-----------cut-----------cut-----------cut-----------cut-----------cut-----------')
    print(Sql)
    print('-----------cut-----------cut-----------cut-----------cut-----------cut-----------')
    exit()

  # Check/setup the Oracle environment
  if (not('ORACLE_SID' in list(environ.keys()))):
    print('ORACLE_SID is required.')
    exit(1)
  else:
    # Set the ORACLE_HOME just in case it isn't set already.
    if (not('ORACLE_HOME' in list(environ.keys()))):
      (OracleSid, OracleHome) = SetOracleEnv(environ['ORACLE_SID'])

  # Parse the connect string if any, prompt for username, password if needed.
  if (len(args) > 0 and Show == False):
    InStr = args[0]
    ConnStr = ParseConnectString(InStr)

  # Execute the report
  if (ConnStr != ''):
    (Stdout) = RunSqlplus(Sql, ErrChk, ConnStr)
  else:
    (Stdout) = RunSqlplus(Sql, ErrChk)

  # Print the report
  if (Stdout != ''):
    print('\n%s' % Stdout)

  exit(0)
# --------------------------------------
# ---- End Main Program ----------------
# --------------------------------------
