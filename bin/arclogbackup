#!/bin/env python

#--------------------------------------------------------------------------------------------------#
# Name:   arclogbackup                                                                             #
# Author: Randy Johnson                                                                            #
# Descr:  Report information on archived redo logs.                                                #
#                                                                                                  #
# Date       Ver. Who              Change Description                                              #
# ---------- ---- ---------------- -------------------------------------------------------------   #
# 09/11/2017 1.00 Randy Johnson    Initial write.                                                  #
# 06/12/2020 1.01 Randy Johnson    Reset header formatting.                                        #
#--------------------------------------------------------------------------------------------------#

# --------------------------------------
# ---- Import Python Modules -----------
# --------------------------------------
from optparse     import OptionParser
from os           import environ
from os.path      import basename
from sys          import argv
from sys          import exit
from sys          import version_info
from signal       import SIGPIPE
from signal       import SIG_DFL
from signal       import signal
from Oracle       import RunSqlplus
from Oracle       import RunRman
from Oracle       import SetOracleEnv
from Oracle       import ParseConnectString
from Oracle       import PrintError


# --------------------------------------
# ---- Main Program --------------------
# --------------------------------------
if (__name__ == '__main__'):
  Cmd            = basename(argv[0]).split('.')[0]
  CmdDesc        = 'Archivelog Backups Info.'
  Version        = '1.01'
  VersionDate    = 'Fri Jun 12 22:00:50 CDT 2020'
  DevState       = 'Production'
  Banner         = CmdDesc + ': Release ' + Version + ' '  + DevState + '. Last updated: ' + VersionDate
  Rcv            = ''
  Sql            = ''
  SqlHeader      = '/***** ' + CmdDesc.upper() + ' *****/'
  ErrChk         = False
  ArgParser      = OptionParser()
  ConnStr        = ''

  # For handling termination in stdout pipe; ex: when you run: oerrdump | head
  signal(SIGPIPE, SIG_DFL)

  ArgParser.add_option('-c',  dest='ListCopy',   action='store_true', default=False,            help="RMAN> list copy of archivelog ...")
  ArgParser.add_option('-b',  dest='ListBackup', action='store_true', default=False,            help="RMAN> list backup of archivelog ...")
  ArgParser.add_option('-d',  dest='Deleted',    action='store_true', default=False,            help="include deleted archivelogs in the report.")
  ArgParser.add_option('-n',  dest='Name',                            default='',    type=str,  help="where upper(name) like '%sssss%'")
  ArgParser.add_option('-m',  dest='Media',                           default='',    type=str,  help="RMAN> list backup ... device type disk/sbt (default=ALL")
  ArgParser.add_option('-f',  dest='FirstScn',                        default='',    type=str,  help="where first_change# >= nnnnn")
  ArgParser.add_option('-l',  dest='LastScn',                         default='',    type=str,  help="where next_change#  <= nnnnn")
  ArgParser.add_option('--s', dest='Show',       action='store_true', default=False,            help="print SQL query.")
  ArgParser.add_option('--v', dest='ShowVer',    action='store_true', default=False,            help="print version info.")

  # Parse command line arguments
  Options, args = ArgParser.parse_args()

  ListCopy   = Options.ListCopy
  ListBackup = Options.ListBackup
  Media      = Options.Media
  Deleted    = Options.Deleted
  Name       = Options.Name
  FirstScn   = Options.FirstScn
  LastScn    = Options.LastScn
  Show       = Options.Show
  ShowVer    = Options.ShowVer
  
  if (ListCopy == True or ListBackup == True):
    Rman = True
  else:
    Rman = False

  #if (ListBackup == False and ListCopy == False):
  #  ListBackup = True
  #  ListCopy   = True
    
  if (Media == ''):
    Media = 'ALL'
  else:
    Media = Media.upper()
    if (Media == 'TAPE'):
      Media = 'SBT'

  if (LastScn != ''):
    LastScn = str(int(LastScn) + 1)

  if (ShowVer == True):
    print('\n%s' % Banner)
    exit()

  if (Name != '' and Rman == True):
    if (FirstScn != '' or LastScn != ''):
      print('Name option (-n) cannot be used with FirstScn (-f) or LastScn (-l) option when searching the backups.')
      exit(1)

  if (Rman == True):
    if ((FirstScn == '' and LastScn != '') or (LastScn == '' and FirstScn != '')):
      print('FirstScn (-f) and LastScn (-l) options must be used together when searching the backups.')
      exit(1)

  if (Rman == True):
    if (ListCopy == True):
      Rcv += "LIST COPY OF ARCHIVELOG"
      if ((FirstScn == '' or LastScn == '') and (Name == '')):
        Rcv += ' ALL'
      else:
        if (FirstScn != ''):
          Rcv += " FROM SCN " + FirstScn
        if (LastScn != ''):
          Rcv += " UNTIL SCN " + LastScn
        if (Name != ''):
          Rcv += " LIKE '%" + Name + "%'"
      Rcv += ";"

  
    if (ListBackup == True):
      if (Media == 'ALL' or Media == 'DISK'): 
        if (ListCopy == True):
          Rcv += "\n"
        Rcv += "LIST BACKUP OF ARCHIVELOG"
        if ((FirstScn == '' or LastScn == '') and (Name == '')):
          Rcv += ' ALL'
        else:
          if (FirstScn != ''):
            Rcv += " FROM SCN " + FirstScn
          if (LastScn != ''):
            Rcv += " UNTIL SCN " + LastScn
          if (Name != ''):
            Rcv += " LIKE '%" + Name + "%'"
        Rcv += " DEVICE TYPE DISK;"
  
      if (Media == 'ALL' or Media == 'SBT'):
        if (ListCopy == True or Media == 'ALL' or Media == 'DISK'):
          Rcv += "\n"
        #if (Media == 'ALL'):
        #  Rcv += "\n"
        Rcv += "LIST BACKUP OF ARCHIVELOG"
        if ((FirstScn == '' or LastScn == '') and (Name == '')):
          Rcv += ' ALL'
        #Rcv += "LIST BACKUP OF ARCHIVELOG"
        if (FirstScn != ''):
          Rcv += " FROM SCN " + FirstScn
        if (LastScn != ''):
          Rcv += " UNTIL SCN " + LastScn
        if (Name != ''):
          Rcv += " LIKE '%" + Name + "%'"
        Rcv += " DEVICE TYPE SBT;"

    if(Show):
      print('-----------cut-----------cut-----------cut-----------cut-----------cut-----------')
      print(Rcv)
      print('-----------cut-----------cut-----------cut-----------cut-----------cut-----------')
      exit()
    
    # Check/setup the Oracle environment
    if (not('ORACLE_SID' in list(environ.keys()))):
      print('ORACLE_SID is required.')
      exit(1)
    else:
      # Set the ORACLE_HOME just in case it isn't set already.
      if (not('ORACLE_HOME' in list(environ.keys()))):
        (OracleSid, OracleHome) = SetOracleEnv(environ['ORACLE_SID'])
    
    # Parse the connect string if any, prompt for username, password if needed.
    if (len(args) > 0 and Show == False):
      InStr = args[0]
      ConnStr = ParseConnectString(InStr)
    
    # Execute the report
    print("\nReport Status of Archivelogs - RMAN Format:")
    if (ListCopy == True):
      print("  - List Copy of archivelog ...")
    if (ListBackup == True):
      if (Media == 'ALL' or Media         == 'DISK'):
        print("  - List Backup of archivelog device type DISK")
      if (Media == 'ALL' or Media == 'SBT'):
        print("  - List Backup of archivelog device type SBT")

    if (ConnStr != ''):
      (Stdout) = RunRman(Rcv, ErrChk, ConnStr)
    else:
      (Stdout) = RunRman(Rcv, ErrChk)

  else:
    Sql += "column start_time            format a19             heading 'Backup Started'\n"
    Sql += "column completion_time       format a19             heading 'Backup Ended'\n"
    Sql += "column backupset             format 99999999        heading 'Backupset'\n"
    Sql += "column name                  format a100            heading 'Name'\n"
    Sql += "column first_change#         format 999999999999999 heading 'First SCN'\n"
    Sql += "column next_change#          format 999999999999999 heading 'Last SCN'\n"
    Sql += "column sequence#             format 9999999999      heading 'Sequence'\n"
    Sql += "column backup_count          format 999             heading 'Backup Count'\n"
    Sql += "column deleted               format a7              heading 'Deleted'\n"
    Sql += "column is_recovery_dest_file format a8              heading 'FRA File'\n"
    Sql += "\n"
    Sql += "  SELECT " + SqlHeader + "\n"
    Sql += "          first_change#\n"
    Sql += "        , next_change#\n"
    Sql += "        , thread#\n"
    Sql += "        , sequence#\n"
    Sql += "        , handle name\n"
    Sql += "        , bp.recid backupset\n"
    Sql += "        , TO_CHAR(bp.start_time, 'yyyy-mm-dd hh24:mi') start_time\n"
    Sql += "        , TO_CHAR(bp.completion_time, 'yyyy-mm-dd hh24:mi') completion_time\n"
    Sql += "     FROM v$backup_redolog br\n"
    Sql += "        , v$backup_piece   bp\n"
    Sql += "    WHERE br.set_stamp = bp.set_stamp\n"
    Sql += "      AND br.set_count = bp.set_count\n"
    if (Deleted != True):
       Sql += "     AND upper(deleted) = 'NO'\n"
    if (FirstScn != ''):
      Sql += "     AND first_change# >= " + FirstScn + "\n"
    if (LastScn != ''):
      Sql += "     AND next_change#  <= " + LastScn + "\n"
    if (Name != ''):
      Sql += "     AND upper(name) LIKE '%" + Name.upper() + "%'\n"
    Sql += "ORDER BY first_change#;"
    
    if(Show):
      print('-----------cut-----------cut-----------cut-----------cut-----------cut-----------')
      print(Sql)
      print('-----------cut-----------cut-----------cut-----------cut-----------cut-----------')
      exit()
    
    # Check/setup the Oracle environment
    if (not('ORACLE_SID' in list(environ.keys()))):
      print('ORACLE_SID is required.')
      exit(1)
    else:
      # Set the ORACLE_HOME just in case it isn't set already.
      if (not('ORACLE_HOME' in list(environ.keys()))):
        (OracleSid, OracleHome) = SetOracleEnv(environ['ORACLE_SID'])
    
    # Parse the connect string if any, prompt for username, password if needed.
    if (len(args) > 0 and Show == False):
      InStr = args[0]
      ConnStr = ParseConnectString(InStr)
    
    # Execute the report
    print("\nReport Status of Archivelog Backups:")
    if (ConnStr != ''):
      (Stdout) = RunSqlplus(Sql, ErrChk, ConnStr)
    else:
      (Stdout) = RunSqlplus(Sql, ErrChk)

  # Print the report
  if (Stdout != ''):
    print('\n%s' % Stdout)

  exit(0)
# --------------------------------------
# ---- End Main Program ----------------
# --------------------------------------
