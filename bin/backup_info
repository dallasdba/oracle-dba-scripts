#!/bin/env python

#--------------------------------------------------------------------------------------------------#
# Name:   backup_info                                                                              #
# Author: Randy Johnson                                                                            #
# Descr:  Reports RMAN backup information.                                                         #
#                                                                                                  #
# Date       Ver. Who              Change Description                                              #
# ---------- ---- ---------------- -------------------------------------------------------------   #
# 08/15/2015 1.00 Randy Johnson    Initial write.                                                  #
# 08/24/2015 1.10 Randy Johnson    Added environ['NLS_DATE_FORMAT'] = 'yyyy-mm-dd hh24:mi'         #
# 07/13/2017 1.20 Randy Johnson    Added program description to Usage.                             #
#--------------------------------------------------------------------------------------------------#

# --------------------------------------
# ---- Import Python Modules -----------
# --------------------------------------
from optparse     import OptionParser
from os           import environ
from os.path      import basename
from sys          import argv
from sys          import exit
from sys          import version_info
from signal       import SIGPIPE
from signal       import SIG_DFL
from signal       import signal
from Oracle       import RunRman
from Oracle       import RunSqlplus
from Oracle       import SetOracleEnv
from Oracle       import ParseConnectString


# --------------------------------------
# ---- Main Program --------------------
# --------------------------------------
if (__name__ == '__main__'):
  Cmd            = basename(argv[0]).split('.')[0]
  CmdDesc        = 'RMAN Backup Reports'
  Version        = '1.20'
  VersionDate    = 'Thu Jul 13 12:15:38 CDT 2017'
  DevState       = 'Production'
  Banner         = CmdDesc + ': Release ' + Version + ' '  + DevState + '. Last updated: ' + VersionDate
  Rcv            = ''
  ErrChk         = False
  InStr          = ''
  ConnStr        = ''
  Stdout         = ''
  SqlHeader      = '/***** ' + CmdDesc.upper() + ' *****/'
  Sql            = ''

  # Set NLS Date format for RMAN queries...
  environ['NLS_DATE_FORMAT'] = 'yyyy-mm-dd hh24:mi'

  # For handling termination in stdout pipe; ex: when you run: oerrdump | head
  signal(SIGPIPE, SIG_DFL)

  Usage  = '\n\n-------------------------------------------------------------------------------'
  Usage += '\nReports RMAN backup information.'
  Usage += '\n  - LIST BACKUP SUMMARY'
  Usage += '\n  - LIST BACKUP                    (-e)'
  Usage += '\n  - LIST BACKUP OF DATABASE        (-d)'
  Usage += '\n  - LIST BACKUP OF ARCHIVELOG ALL  (-a)'
  Usage += '\n  - LIST BACKUP OF CONTROLFILE     (-c)'
  Usage += '\n  - REPORT SCHEMA                  (-r)'
  ArgParser = OptionParser(Usage)

  ArgParser.add_option('-a',  dest='Archivelogs',  action='store_true', default=False, help="report archivelog backups.")
  ArgParser.add_option('-c',  dest='Controlfiles', action='store_true', default=False, help="report controlfile backups.")
  ArgParser.add_option('-d',  dest='Datafiles',    action='store_true', default=False, help="report datafile backups.")
  ArgParser.add_option('-e',  dest='Everything',   action='store_true', default=False, help="report all backup files (archivelogs, controlfiles, datafiles).")
  ArgParser.add_option('-r',  dest='ReportSchema', action='store_true', default=False, help="report schema.")
  ArgParser.add_option('-s',  dest='Summary',      action='store_true', default=False, help="report backup summary")
  ArgParser.add_option('--s', dest='Show',         action='store_true', default=False, help="print rman commands.")
  ArgParser.add_option('--v', dest='ShowVer',      action='store_true', default=False, help="print version info.")

  # Parse command line arguments
  Options, args = ArgParser.parse_args()

  Archivelogs  = Options.Archivelogs
  Controlfiles = Options.Controlfiles
  Datafiles    = Options.Datafiles
  Everything   = Options.Everything
  ReportSchema = Options.ReportSchema
  Summary      = Options.Summary
  Show         = Options.Show
  ShowVer      = Options.ShowVer

  if (ShowVer == True):
    print('\n%s' % Banner)
    exit()

  if (ReportSchema == True):
    Rcv += "REPORT SCHEMA;\n"

  if (Everything == True):
    Rcv += "LIST BACKUP;\n"

  if (Datafiles == True):
    Rcv += "LIST BACKUP OF DATABASE;\n"

  if (Archivelogs == True):
    Rcv += "LIST BACKUP OF ARCHIVELOG ALL;\n"

  if (Controlfiles == True):
    Rcv += "LIST BACKUP OF CONTROLFILE;"

  if (Summary == True):
    Rcv = 'LIST BACKUP SUMMARY;'

  Rcv = Rcv.strip()

  if(Show and Rcv != ''):
    print('-----------cut-----------cut-----------cut-----------cut-----------cut-----------')
    print(Rcv)
    print('-----------cut-----------cut-----------cut-----------cut-----------cut-----------')
    exit()


  if (Rcv != ''):
     # Check/setup the Oracle environment
     if (not('ORACLE_SID' in list(environ.keys()))):
       print('ORACLE_SID is required.')
       exit(1)
     else:
       # Set the ORACLE_HOME just in case it isn't set already.
       if (not('ORACLE_HOME' in list(environ.keys()))):
         (OracleSid, OracleHome) = SetOracleEnv(environ['ORACLE_SID'])

     # Parse the connect string if any, prompt for username, password if needed.
     if (len(args) > 0 and Show == False):
       InStr = args[0]
       ConnStr = ParseConnectString(InStr)

     # Execute the report
     if (ConnStr != ''):
       (Stdout) = RunRman(Rcv, ErrChk, ConnStr)
     else:
       (Stdout) = RunRman(Rcv, ErrChk)

     # Print the report
     if (Stdout != ''):
       print('\n%s' % Stdout)
  else:
    Sql += "column session_key format 999999999  heading 'Backup Set'\n"
    Sql += "column input_type  format a25        heading 'Backup Type'\n"
    Sql += "column status      format a25        heading 'Status'\n"
    Sql += "column start_time  format a20        heading 'Start'\n"
    Sql += "column end_time    format a20        heading 'End'\n"
    Sql += "column Hours       format 999.99     heading 'Hours'\n"
    Sql += "\n"
    Sql += "  SELECT " + SqlHeader + "\n"
    Sql += "         session_key\n"
    Sql += "        ,input_type\n"
    Sql += "        ,status\n"
    Sql += "        ,to_char(START_TIME,'mm/dd/yyyy hh24:mi') start_time\n"
    Sql += "        ,to_char(END_TIME,'mm/dd/yyyy hh24:mi') end_time, elapsed_seconds/3600 hours\n"
    Sql += "   FROM v$rman_backup_job_details\n"
    Sql += "  order by session_key;"

    Sql = Sql.strip()

    if(Show):
      print('-----------cut-----------cut-----------cut-----------cut-----------cut-----------')
      print(Sql)
      print('-----------cut-----------cut-----------cut-----------cut-----------cut-----------')
      exit()

    # Check/setup the Oracle environment
    if (not('ORACLE_SID' in list(environ.keys()))):
      print('ORACLE_SID is required.')
      exit(1)
    else:
      # Set the ORACLE_HOME just in case it isn't set already.
      if (not('ORACLE_HOME' in list(environ.keys()))):
        (OracleSid, OracleHome) = SetOracleEnv(environ['ORACLE_SID'])

    # Parse the connect string if any, prompt for username, password if needed.
    if (len(args) > 0 and Show == False):
      InStr = args[0]
      ConnStr = ParseConnectString(InStr)

    # Execute the report
    if (ConnStr != ''):
      (Stdout) = RunSqlplus(Sql, ErrChk, ConnStr)
    else:
      (Stdout) = RunSqlplus(Sql, ErrChk)

    # Print the report
    if (Stdout != ''):
      print('\n%s' % Stdout)

  exit(0)
# --------------------------------------
# ---- End Main Program ----------------
# --------------------------------------
