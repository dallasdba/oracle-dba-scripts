#!/bin/env python

#--------------------------------------------------------------------------------------------------#
#  Name: monitor_dpmp3                                                                             #
#  Auth: Randy Johnson                                                                             #
#  Desc: Monitors the progress Datapump jobs.                                                      #
#                                                                                                  #
# Date       Ver. Who              Change Description                                              #
# ---------- ---- ---------------- -------------------------------------------------------------   #
# 12/13/2019 1.00 Randy Johnson    Initial write.                                                  #
# 06/22/2020 1.01 Randy Johnson    First commit.                                                   #
#--------------------------------------------------------------------------------------------------#

# --------------------------------------
# ---- Import Python Modules -----------
# --------------------------------------
from optparse   import OptionParser
from os         import environ
from os.path    import basename
from sys        import argv
from sys        import exit
from Oracle     import RunSqlplus
from Oracle     import PrintError
from Oracle     import SetOracleEnv


# --------------------------------------
# ---- Main Program --------------------
# --------------------------------------
if (__name__ == '__main__'):
  Cmd            = basename(argv[0])
  CmdPrefix      = Cmd.split('.')[0]
  CmdDesc        = 'Monitor Datapump Jobs 3 (' + Cmd + ')'
  VersionDate    = 'Mon Jun 22 09:57:36 CDT 2020'
  Version        = '1.01'
  Sql            = ''
  ErrChk         = False
  ArgParser      = OptionParser()
  SqlHeader      = '/***** ' + CmdDesc.upper() + ' *****/'
  ConnStr        = ''

  Usage  = '\n\n-------------------------------------------------------------------------------'
  Usage += '\nMonitors the progress of Datapump Export/Import Jobs'
  ArgParser = OptionParser(Usage)

  ArgParser.add_option("--s", dest="Show",    default=False, action="store_true",           help="print SQL query.")
  ArgParser.add_option("--v", dest="Version", default=False, action="store_true",           help="print version info.")

  Options, args = ArgParser.parse_args()
  argc = len(args)

  if (Options.Version):
    Banner = CmdDesc + ', Release ' + Version + ' Production, ' + VersionDate
    print('\n%s' % Banner)
    exit()

  Show = Options.Show

  # Check/set the Oracle environment
  if (not('ORACLE_SID' in list(environ.keys()))):
    print('Set your ORACLE_SID to the database you want to search.')
    exit(1)
  else:
    # Set the ORACLE_HOME just in case it isn't set already.
    if (not('ORACLE_HOME' in list(environ.keys()))):
      (OracleSid, OracleHome) = SetOracleEnv(environ['ORACLE_SID'])

  Sql += "SET SERVEROUTPUT ON\n"
  Sql += "DECLARE\n"
  Sql += "  ind          NUMBER;\n"
  Sql += "  h1           NUMBER;\n"
  Sql += "  percent_done NUMBER;\n"
  Sql += "  job_state    VARCHAR2(30);\n"
  Sql += "  js           ku$_JobStatus;\n"
  Sql += "  ws           ku$_WorkerStatusList;\n"
  Sql += "  sts          ku$_Status;\n"
  Sql += "\n"
  Sql += "BEGIN\n"
  Sql += "  h1 := DBMS_DATAPUMP.attach('JOB_NAME', 'JOB_OWNER');\n"
  Sql += "  dbms_datapump.get_status(\n"
  Sql += "    h1,\n"
  Sql += "    dbms_datapump.ku$_status_job_error +\n"
  Sql += "    dbms_datapump.ku$_status_job_status +\n"
  Sql += "    dbms_datapump.ku$_status_wip, 0, job_state, sts\n"
  Sql += "  );\n"
  Sql += "  js := sts.job_status;\n"
  Sql += "  ws := js.worker_status_list;\n"
  Sql += "  dbms_output.put_line('*** Job percent done = ' || to_char(js.percent_done));\n"
  Sql += "  dbms_output.put_line('restarts - '||js.restart_count);\n"
  Sql += "  ind := ws.first;\n"
  Sql += "  while ind is not null loop\n"
  Sql += "    dbms_output.put_line('rows completed - '||ws(ind).completed_rows);\n"
  Sql += "    ind := ws.next(ind);\n"
  Sql += "    end loop;\n"
  Sql += "  DBMS_DATAPUMP.detach(h1);\n"
  Sql += "END;\n"
  Sql += "/"
  
  if(Show):
    print('-----------cut-----------cut-----------cut-----------cut-----------cut-----------')
    print(Sql)
    print('-----------cut-----------cut-----------cut-----------cut-----------cut-----------')
    exit()

  # Check/setup the Oracle environment
  if (not('ORACLE_SID' in list(environ.keys()))):
    print('ORACLE_SID is required.')
    exit(1)
  else:
    # Set the ORACLE_HOME just in case it isn't set already.
    if (not('ORACLE_HOME' in list(environ.keys()))):
      (OracleSid, OracleHome) = SetOracleEnv(environ['ORACLE_SID'])

  # Parse the connect string if any, prompt for username, password if needed.
  if (len(args) > 0 and Show == False):
    InStr = args[0]
    ConnStr = ParseConnectString(InStr)

  # Execute the report
  if (ConnStr != ''):
    (Stdout) = RunSqlplus(Sql, ErrChk, ConnStr)
  else:
    (Stdout) = RunSqlplus(Sql, ErrChk)

  # Print the report
  if (Stdout != ''):
    print('\n%s' % Stdout)


  exit(0)
# --------------------------------------
# ---- End Main Program ----------------
# --------------------------------------

