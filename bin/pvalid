#!/bin/env python

#--------------------------------------------------------------------------------------------------#
# Name: pvalid                                                                                     #
# Auth: Randy Johnson                                                                              #
# Desc: Display valid parameter values from v$parameter_valid_values.                              #
#                                                                                                  #
# Date       Ver. Who              Change Description                                              #
# ---------- ---- ---------------- -------------------------------------------------------------   #
# 07/17/2015 2.00 Randy Johnson    Updated for Python 2.4-3.4 compatibility. Added prompts for     #
#                                  username, password, tnsname.                                    #
# 07/13/2017 2.01 Randy Johnson    Added program description to Usage.                             #
# 06/12/2020 2.02 Randy Johnson    Reset header formatting.                                        #
#--------------------------------------------------------------------------------------------------#

# --------------------------------------
# ---- Import Python Modules -----------
# --------------------------------------
from datetime     import datetime
from optparse     import OptionParser
from os           import environ
from os.path      import basename
from signal       import SIG_DFL
from signal       import SIGPIPE
from signal       import signal
from sys          import argv
from sys          import exit
from sys          import version_info
from Oracle       import ParseConnectString
from Oracle       import RunSqlplus
from Oracle       import SetOracleEnv
from Oracle       import ValidateDate


# --------------------------------------
# ---- Main Program --------------------
# --------------------------------------
if (__name__ == '__main__'):
  Cmd            = basename(argv[0]).split('.')[0]
  CmdDesc        = 'Valid Parameter Values2'
  Version        = '2.02'
  VersionDate    = 'Fri Jun 12 22:00:50 CDT 2020'
  DevState       = 'Production'
  Banner         = CmdDesc + ': Release ' + Version + ' '  + DevState + '. Last updated: ' + VersionDate
  Sql            = ''
  SqlHeader      = '/***** ' + CmdDesc.upper() + ' *****/'
  ErrChk         = False
  InStr          = ''
  TnsName        = ''
  Username       = ''
  Password       = ''
  ConnStr        = ''
  InstList       = []

  # For handling termination in stdout pipe; ex: when you run: oerrdump | head
  signal(SIGPIPE, SIG_DFL)

  # Process command line options
  # ----------------------------------
  Usage  =  '%s [options]'  % Cmd
  Usage += '\n\n%s'         % CmdDesc
  Usage += '\n-------------------------------------------------------------------------------'
  Usage += '\nDisplay valid parameter values from v$parameter_valid_values.'
  ArgParser = OptionParser(Usage)

  ArgParser.add_option('-g',  dest='Global',     action='store_true', default=False,           help="search gv$... (default is v$...)")
  ArgParser.add_option('-i',  dest='Instances',                       default='',    type=str, help="where inst_id in 1,2,3,...")
  ArgParser.add_option('-n',  dest='Name',                            default='',    type=str, help="where name like ...")
  ArgParser.add_option('--s', dest='Show',       action='store_true', default=False,           help="print SQL query.")
  ArgParser.add_option('--v', dest='ShowVer',    action='store_true', default=False,           help="print version info.")

  # Parse command line arguments
  Options, args = ArgParser.parse_args()

  Global    = Options.Global
  Instances = Options.Instances
  Name      = Options.Name
  Show      = Options.Show
  ShowVer   = Options.ShowVer

  if (ShowVer == True):
    print('\n%s' % Banner)
    exit()

  # Assume gv$sysmetric if an instance list is specified.
  if (not Global and Instances != ''):
    Global = True
  
  if(Instances != ''):
    InstList = Instances.split(',')
    try:
      if (version_info[0] >= 3):
        InstList = list(map(int, InstList))
        InstList = list(map(str, InstList))
      else:
        InstList = map(int, InstList)
        InstList = map(str, InstList)
    except:
      print("Instance list must be in integer form, eg. -i 1,2,3,4")
      exit(1)

  if (Global):
    Sql += "column inst           format 9999  heading 'Inst'\n"
  Sql += "column parm#          format 9999  heading 'Parm# '\n"
  Sql += "column ordinal        format 9999  heading 'Ordinal'\n"
  Sql += "column value          format a30   heading 'Value'\n"
  Sql += "column name           format a50   heading 'Parameter'\n"
  Sql += "column isdefault      format a20   heading 'Default'\n"
  Sql += "\n"
  if (Global):
    Sql += "break on inst on parm# skip 1\n"
  else:
    Sql += "break on parm# skip 1\n"
  Sql += "\n"
  Sql += "  SELECT " + SqlHeader + "\n"
  if (Global):
    Sql += "         inst_id inst\n"
    Sql += "       , num parm#\n"
  else:
    Sql += "         num parm#\n"
  Sql += "       , name\n"
  Sql += "       , ordinal\n"
  Sql += "       , value\n"
  Sql += "       , DECODE(isdefault, 'FALSE', '', 'DEFAULT' ) isdefault\n"
  if (Global):
    Sql += "    FROM gv$parameter_valid_values\n"
  else:
    Sql += "    FROM v$parameter_valid_values\n"
  if (Name != ''):
    Sql += "   WHERE UPPER(name) LIKE '%"+ Name.upper()  +"%'\n"
  if (Instances != ''):
    Sql += "     AND inst_id IN (" + Instances + ")\n"
  if (Global):
    Sql += "ORDER BY inst_id\n"
    Sql += "       , num\n"
  else:
    Sql += "ORDER BY num\n"
  Sql += "       , isdefault\n"
  Sql += "       , ordinal\n"
  Sql += "       , value;"

  Sql = Sql.strip()

  if(Show):
    print('-----------cut-----------cut-----------cut-----------cut-----------cut-----------')
    print(Sql)
    print('-----------cut-----------cut-----------cut-----------cut-----------cut-----------')
    exit()

  # Parse the connect string if any, prompt for username, password if needed.
  if (len(args) > 0):
    InStr = args[0]
    ConnStr = ParseConnectString(InStr)
    if (not(ConnStr.upper().find(' AS SYSDBA') >= 0)):
      ConnStr += ' AS SYSDBA'

  # Check/setup the Oracle environment
  if (not('ORACLE_SID' in list(environ.keys()))):
    print('ORACLE_SID is required.')
    exit(1)
  else:
    # Set the ORACLE_HOME just in case it isn't set already.
    if (not('ORACLE_HOME' in list(environ.keys()))):
      (OracleSid, OracleHome) = SetOracleEnv(environ['ORACLE_SID'])

  # Execute the report
  if (ConnStr != ''):
    (Stdout) = RunSqlplus(Sql, ErrChk, ConnStr)
  else:
    (Stdout) = RunSqlplus(Sql, ErrChk)

  # Print the report
  if (Stdout != ''):
    print('\n%s' % Stdout)

  exit(0)
# --------------------------------------
# ---- End Main Program ----------------
# --------------------------------------
