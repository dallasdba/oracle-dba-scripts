#!/bin/env python

#--------------------------------------------------------------------------------------------------#
# Name: oratab                                                                                     #
# Auth: Randy Johnson                                                                              #
# Desc: Displays the contents of the oratab file in report format. Commented lines are omitted.    #
#                                                                                                  #
# Date       Ver. Who              Change Description                                              #
# ---------- ---- ---------------- --------------------------------------------------------------  #
# 04/17/2017 1.00 Randy Johnson    Initial release.                                                #
# 09/01/2017 1.01 Randy Johnson    Add program description to -h.                                  #
# 09/05/2017 1.10 Randy Johnson    Added -d, -i, -r, -t and -v options. Simplified parsing logic   #
#                                  in LoadOratab().                                                #
# 02/12/2020 1.11 Randy Johnson    Added logic to gracefuly handle missing oratab file.            #
#                                  Changed -d Distinct option to -u Unique.                        #
# 06/12/2020 1.12 Randy Johnson    Reset header formatting.                                        #
#--------------------------------------------------------------------------------------------------#

# --------------------------------------
# ---- Import Python Modules -----------
# --------------------------------------
from datetime     import datetime
from optparse     import OptionParser
from os.path      import basename
from os.path      import isfile
from os.path      import join as pathjoin
from sys          import argv
from sys          import exit
from sys          import version_info
from signal       import SIGPIPE
from signal       import SIG_DFL
from signal       import signal

# ---------------------------------------------------------------------------
# Def : LoadOratab()
# Desc: Parses the oratab file and returns a list structure of:
#        [['dbm',   '/u01/app/oracle/product/11.2.0.3/dbhome_1','N']
#         ['biuat', '/u01/app/oracle/product/11.2.0.3/dbhome_1','N']]
# Args: Oratab (optional, defaults to '')
# Retn: 1) Oratab - The file name, 2) OratabList - A list of OraSid, OraHome, OraFlag
# ---------------------------------------------------------------------------
def LoadOratab(Oratab=''):
  OraSid     = ''
  OraHome    = ''
  OraFlag    = ''
  OratabList = []
  OratabLoc  = ['/etc/oratab','/var/opt/oracle/oratab']
  otab       = ''
  HomeList   = []

  # If an oratab file name has been passed in...
  if Oratab != '':
    # If the oratab file name passed in is not already in the list of common locations...
    if not (Oratab in OratabLoc):
      OratabLoc.insert(0, Oratab)

  for Oratab in OratabLoc:
    if isfile(Oratab):
      try:
        otab = open(Oratab)
        break                          # exit the loop if the file can be opened.
      except:
        print('\n%s' % traceback.format_exc())
        print('\nCannot open oratab file: ' + Oratab + ' for read.')
        return ('','')

  if otab == '':
    return ('','')
  else:
    for line in otab.readlines():
      line = line.split('#', 1)[0].strip()
      Count = line.count(':')
      if Count >= 1:
        OraFlag = ''
        if Count == 1:
          (OraSid, OraHome) = line.split(':')
        elif Count == 2:
          (OraSid, OraHome, OraFlag) = line.split(':')
        elif Count >= 3:
          OraSid = line.split(':')[0]
          OraHome = line.split(':')[1]
          OraFlag = line.split(':')[2]

        # Validate the Oracle Home. It is only included in
        # in the list if it is valid, ie. contains a bin
        # directory with the oracle executable in it.
        # ------------------------------------------------
        OraBin = pathjoin(OraHome, 'bin', 'oracle')
        if Valid:
          if isfile(OraBin):
            if Unique:
              if OraHome not in HomeList:
                OratabList.append((OraSid, OraHome, OraFlag))
                HomeList.append(OraHome)
            else:
              OratabList.append((OraSid, OraHome, OraFlag))
              HomeList.append(OraHome)
        elif Invalid:
          if not isfile(OraBin):
            if Unique:
              if OraHome not in HomeList:
                OratabList.append((OraSid, OraHome, OraFlag))
                HomeList.append(OraHome)
            else:
              OratabList.append((OraSid, OraHome, OraFlag))
              HomeList.append(OraHome)
        else:
          if Unique:
            if OraHome not in HomeList:
              OratabList.append((OraSid, OraHome, OraFlag))
              HomeList.append(OraHome)
          else:
            OratabList.append((OraSid, OraHome, OraFlag))
            HomeList.append(OraHome)

  return Oratab, OratabList
# ---------------------------------------------------------------------------
# End LoadOratab()
# ---------------------------------------------------------------------------


# --------------------------------------
# ---- Main Program --------------------
# --------------------------------------
if __name__ == '__main__':
  Cmd            = basename(argv[0])
  Version        = '1.12'
  VersionDate    = 'Fri Jun 12 22:00:50 CDT 2020'
  CmdDesc        = 'Report Oratab File'
  DevState       = 'Production'
  Banner         = CmdDesc + ': Release ' + Version + ' '  + DevState + '. Last updated: ' + VersionDate
  Flag           = ''

  # For handling termination in stdout pipe; ex: when you run: oerrdump | head
  signal(SIGPIPE, SIG_DFL)

  # Process command line options
  # ----------------------------------
  Usage  =  '%s [options]'  % Cmd
  Usage += '\n\n%s'         % CmdDesc
  Usage += '\n-------------------------------------------------------------------------------'
  Usage += '\nReport Contents of the Oratab File.'
  ArgParser = OptionParser(Usage)

  ArgParser.add_option("-i",  action="store_true", dest="Invalid",     default=False, help="report only invalid oracle homes")
  ArgParser.add_option("-r",  action="store_true", dest="Restart",     default=False, help="show the restart flag")
  ArgParser.add_option("-t",  action="store_true", dest="Terse",       default=False, help="terse report format")
  ArgParser.add_option("-u",  action="store_true", dest="Unique",      default=False, help="report unique oracle homes found")
  ArgParser.add_option("-v",  action="store_true", dest="Valid",       default=False, help="report only valid oracle homes")
  ArgParser.add_option("--v", action="store_true", dest="ShowVer",     default=False, help="print version info.")

  Options, args = ArgParser.parse_args()
  argc = len(args)

  Unique   = Options.Unique
  Invalid  = Options.Invalid
  Restart  = Options.Restart
  ShowVer  = Options.ShowVer
  Terse    = Options.Terse
  Valid    = Options.Valid

  if ShowVer:
    print('\n%s' % Banner)
    exit()

  if Valid and Invalid:
    print('\nThe -i and -v options may not be used together.')
    exit(1)

  if Unique and Restart:
    print('\nThe -u and -r options may not be used together.')
    exit(1)

  OratabFile, OratabList = LoadOratab()

  if not isfile(OratabFile):
    print("\nFile not found: oratab")
    exit(1)

  if not Terse:
    print('\nOratab File: %s' % OratabFile)
    if Unique:
      print("\n%-s" % ("Oracle Home"))
      print("%-s" % ("------------------------------------------------------------"))
    elif Restart:
      print("\n%-20s %-60s %s" % ("Oracle SID","Oracle Home", "F"))
      print("%-20s %-60s %s" % ("--------------------","------------------------------------------------------------", "-"))
    else:
      print("\n%-20s %-s" % ("Oracle SID","Oracle Home"))
      print("%-20s %-s" % ("--------------------","------------------------------------------------------------"))

  if OratabList:
    for OraSid, OraHome, OraFlag in sorted(OratabList):
      if Unique:
        print("%-s" % (OraHome))
      elif Restart:
        print("%-20s %-60s %-s" % (OraSid,OraHome,OraFlag))
      else:
        print("%-20s %-60s" % (OraSid,OraHome))

  exit(0)
# --------------------------------------
# ---- End Main Program ----------------
# --------------------------------------

