#!/bin/env python

#--------------------------------------------------------------------------------------------------#
#  Name: monitor_rman                                                                              #
#  Auth: Randy Johnson                                                                             #
#  Desc: Monitors the progress of long RMAN operations.                                            #
#                                                                                                  #
# Date       Ver. Who              Change Description                                              #
# ---------- ---- ---------------- -------------------------------------------------------------   #
# 11/20/3019 1.00 Randy Johnson    Initial write.                                                  #
# 06/22/2020 1.01 Randy Johnson    First commit.                                                   #
#--------------------------------------------------------------------------------------------------#

# --------------------------------------
# ---- Import Python Modules -----------
# --------------------------------------
from optparse   import OptionParser
from os         import environ
from os.path    import basename
from sys        import argv
from sys        import exit
from Oracle     import RunSqlplus
from Oracle     import PrintError
from Oracle     import SetOracleEnv


# --------------------------------------
# ---- Main Program --------------------
# --------------------------------------
if (__name__ == '__main__'):
  Cmd            = basename(argv[0])
  CmdPrefix      = Cmd.split('.')[0]
  CmdDesc        = 'Monitor RMAN (' + Cmd + ')'
  VersionDate    = 'Mon Jun 22 09:57:36 CDT 2020'
  Version        = '1.01'
  Sql            = ''
  ErrChk         = False
  ArgParser      = OptionParser()
  SqlHeader      = '/***** ' + CmdDesc.upper() + ' *****/'
  ConnStr        = ''

  Usage  = '\n\n-------------------------------------------------------------------------------'
  Usage += '\nChecks the fuzzy state of datafiles for recovery purposes.'
  ArgParser = OptionParser(Usage)

  ArgParser.add_option("--s", dest="Show",    default=False, action="store_true",           help="print SQL query.")
  ArgParser.add_option("--v", dest="Version", default=False, action="store_true",           help="print version info.")

  Options, args = ArgParser.parse_args()
  argc = len(args)

  if (Options.Version):
    Banner = CmdDesc + ', Release ' + Version + ' Production, ' + VersionDate
    print('\n%s' % Banner)
    exit()

  Show = Options.Show

  # Check/set the Oracle environment
  if (not('ORACLE_SID' in list(environ.keys()))):
    print('Set your ORACLE_SID to the database you want to search.')
    exit(1)
  else:
    # Set the ORACLE_HOME just in case it isn't set already.
    if (not('ORACLE_HOME' in list(environ.keys()))):
      (OracleSid, OracleHome) = SetOracleEnv(environ['ORACLE_SID'])

  Sql += "col opname                      format a50             heading 'Operation'\n"
  Sql += "col pct_complete                format 99.99           heading '% Comp.'\n"
  Sql += "col start_time                  format a15             heading 'Start Time'\n"
  Sql += "col hours_running               format 9999.99         heading 'Hours|Running'\n"
  Sql += "col minutes_left                format 999999          heading 'Minutes|Left'\n"
  Sql += "col est_comp_time               format a15             heading 'Est. Completion|Time'\n"
  Sql += "\n"
  Sql += "   SELECT " + SqlHeader + "\n"
  Sql += "          sid\n"
  Sql += "        , serial#\n"
  Sql += "        , opname\n"
  Sql += "        , ROUND(sofar / totalwork * 100, 2) pct_complete\n"
  Sql += "        , TO_CHAR(start_time, 'dd-mon-yy hh24:mi') start_time\n"
  Sql += "        , (sysdate - start_time) * 24 hours_running\n"
  Sql += "        , ((sysdate - start_time) * 24 * 60) / (sofar / totalwork) - (sysdate - start_time) * 24 * 60 minutes_left\n"
  Sql += "        , TO_CHAR((sysdate - start_time) / (sofar / totalwork) + start_time, 'dd-mon-yy hh24:mi') est_comp_time\n"
  Sql += "    FROM v$session_longops\n"
  Sql += "   WHERE opname        LIKE 'RMAN%'\n"
  Sql += "     AND opname    NOT LIKE '%aggregate%'\n"
  Sql += "     AND totalwork  != 0\n"
  Sql += "     AND sofar      != totalwork\n"
  Sql += "ORDER BY ROUND(sofar / totalwork * 100, 2);"

  if(Show):
    print('-----------cut-----------cut-----------cut-----------cut-----------cut-----------')
    print(Sql)
    print('-----------cut-----------cut-----------cut-----------cut-----------cut-----------')
    exit()

  # Check/setup the Oracle environment
  if (not('ORACLE_SID' in list(environ.keys()))):
    print('ORACLE_SID is required.')
    exit(1)
  else:
    # Set the ORACLE_HOME just in case it isn't set already.
    if (not('ORACLE_HOME' in list(environ.keys()))):
      (OracleSid, OracleHome) = SetOracleEnv(environ['ORACLE_SID'])

  # Parse the connect string if any, prompt for username, password if needed.
  if (len(args) > 0 and Show == False):
    InStr = args[0]
    ConnStr = ParseConnectString(InStr)

  # Execute the report
  if (ConnStr != ''):
    (Stdout) = RunSqlplus(Sql, ErrChk, ConnStr)
  else:
    (Stdout) = RunSqlplus(Sql, ErrChk)

  # Print the report
  if (Stdout != ''):
    print('\n%s' % Stdout)


  exit(0)
# --------------------------------------
# ---- End Main Program ----------------
# --------------------------------------
