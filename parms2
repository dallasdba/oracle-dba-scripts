#!/bin/env python

#------------------------------------------------------------------------------------------------#
# Name:        parms2                                                                            #
# Author:      Randy Johnson                                                                     #
# Description: This script is based on the parms.sql script from Kerry Osborne. This mod of the  #
#              script is meant to be run in 12c and later Container databases only.              #
#              The  script Prints a list of all instance parameters (including hidden parms). If #
#              you provide a parameter or part of a parameter on the command line then all       #
#              parameters not LIKE %parameter% will be filtered out. This script is similar to   #
#              the parms script except it supports multitenant databases. So it reports on the   #
#              container database ($ROOT) and the Seed database (PDB$SEED) ansd all pluggable    #
#              databases.                                                                        #
#                                                                                                #
#              ISDEF : If True, the parameter is currently set to the default value. Note that   #
#                      if the parameter is set to the default value in the spfile ISDEF will be  #
#                      FALSE. This is technically correct but can be a little misleading.        #
#              ISMOD : If True, value has been modified since the instance was started.          #
#              ISSET : If True, value has been set in the parameter file. This is TRUE even if   #
#                      it is set to what would otherwise be the default value.                   #
#------------------------------------------------------------------------------------------------#

# --------------------------------------
# ---- Import Python Modules -----------
# --------------------------------------
from datetime     import datetime
from optparse     import OptionParser
from os           import environ
from os.path      import basename
from re           import compile
from re           import match
from re           import search
from sys          import argv
from sys          import exit
from sys          import version_info
from signal       import SIGPIPE
from signal       import SIG_DFL
from signal       import signal
from subprocess   import Popen
from subprocess   import PIPE
from subprocess   import STDOUT
from Oracle       import RunSqlplus
from Oracle       import SetOracleEnv
from Oracle       import ParseConnectString

# --------------------------------------
# ---- Main Program --------------------
# --------------------------------------
if (__name__ == '__main__'):
  Cmd            = basename(argv[0]).split('.')[0]
  CmdDesc        = 'Parameter Settings 2 (for container databases only)'
  Version        = '1.00'
  VersionDate    = 'Wed Jul 17 15:28:31 CDT 2019'
  DevState       = 'Production'
  Banner         = CmdDesc + ': Release ' + Version + ' '  + DevState + '. Last updated: ' + VersionDate
  Sql            = ''
  SqlHeader      = '/***** ' + CmdDesc.upper() + ' *****/'
  ErrChk         = False
  ArgParser      = OptionParser()
  InStr          = ''
  ConnStr        = ''
  Name           = ''
  FilterList     = []
  InstList       = []
  Ps             = '/bin/ps' 
  rc             = 0


  # Process command line options
  # ----------------------------------
  Usage  =  '%s [connect_string] [options] [parm_filter]' % Cmd
  Usage += '\n\n%s'         % CmdDesc
  Usage += '\n------------------------------------------------------------------------------'
  Usage += '\nReport database parameters for container databases. See parms script for'
  Usage += '\nsingle tenant (non-container) databases.'
  Usage += "\n"
  Usage += '\nParameter Metrics (-m option) Explained:'
  Usage += '\nIsDef : If True, the parameter is currently set to the default value. Note'
  Usage += '\n        that if the parameter is set to the default value in the spfile IsDef'
  Usage += '\n        will be False. This is technically correct but can be a little'
  Usage += '\n        misleading.'
  Usage += '\nIsMod : If True, value has been modified from its startup setting.'
  Usage += '\nIsSet : If True, value has been set in the parameter file. This is True even'
  Usage += '\n        if it is set to what would otherwise be the default value.'

  ArgParser = OptionParser(Usage)

  ArgParser.add_option("-a",  dest="All",     action="store_true", default=False,           help="parms for all running databases")
  ArgParser.add_option("-m",  dest="Metrics", action="store_true", default=False,           help="print parameter metrics")
  ArgParser.add_option('-n',  dest='Name',                         default='',    type=str, help="where name like ...")
  ArgParser.add_option("-u",  dest="Undoc",   action="store_true", default=False,           help="include undocumented (hidden) parms")
  ArgParser.add_option("--s", dest="Show",    action="store_true", default=False,           help="print SQL query")
  ArgParser.add_option('--v', dest='ShowVer', action='store_true', default=False,           help="print version info.")

  # Parse command line arguments
  Options, args = ArgParser.parse_args()
  argc = len(args)

  All       = Options.All
  Hidden    = Options.Undoc
  Metrics   = Options.Metrics
  Name      = Options.Name
  Show      = Options.Show
  ShowVer   = Options.ShowVer

  if (ShowVer):
    print('\n%s' % Banner)
    exit()

  if (All):
    # Identify pmon process for all instances and build a list of Instance Names
    Proc = Popen([Ps, '-ef'], bufsize=1, stdin=PIPE, stdout=PIPE, stderr=STDOUT, shell=False, universal_newlines=True, close_fds=True)

    # Stderr is just a placeholder. We redirected stderr to stdout as follows 'stderr=STDOUT'.
    (Stdout,Stderr) = Proc.communicate()
    Stdout = Stdout.strip()
    
    Found = compile(r' ora_pmon_\w+')  
    for line in Stdout.split('\n'):
      if (Found.search(line)):
        MatchObj = search(r' ora_pmon_\w+', line)
        Inst = MatchObj.group(0).split('_')[2]
        InstList.append(Inst)

    if(InstList == []):
      print("\nNo running databases found on the local host.")
      exit(1)
    
  # Set Where clause filters.
  if (Hidden):
    FilterList.append("hidden IN ('N','Y')\n")
  else:
    FilterList.append("hidden = 'N'\n")

  if (Name != ''):
    FilterList.append("UPPER(name) LIKE '%" + Name.upper() + "%'\n")

  Filter = '              AND '.join(FilterList)
  
  # Build the Query
  Sql += "set pagesize 50000\n"  
  Sql += "break on Container\n"
  Sql += "col inst       format a50  heading 'Inst'\n"
  Sql += "col name       format a50  heading 'Parameter'\n"
  Sql += "col con_name   format a15  heading 'Container'\n"
  if (Metrics):
    Sql += "col isdefault  format a5  heading 'IsDef'\n"
    Sql += "col ismodified format a5  heading 'IsMod'\n"
    Sql += "col isset      format a5  heading 'IsSet'\n"
    Sql += "col value      format a60 heading 'Value'\n"
  else:
    Sql += "col value      format a78 heading 'Value'\n"
  Sql += "\n"
  Sql += "  SELECT " + SqlHeader + "\n"
  Sql += "         dbs.con_name con_name\n"
  Sql += "       , name\n"
  Sql += "       , value\n"
  if (Metrics):
    Sql += "       , isdefault\n"
    Sql += "       , ismodified\n"
    Sql += "       , isset\n"
  Sql += "    FROM ( SELECT con_id\n"
  Sql += "                , name\n"
  Sql += "                , value\n"
  Sql += "                , isdefault\n"
  Sql += "                , ismodified\n"
  Sql += "                , isset\n"
  Sql += "             FROM ( SELECT hidden\n"
  Sql += "                         , con_id\n"
  Sql += "                         , name\n"
  Sql += "                         , value\n"
  Sql += "                         , isdefault\n"
  Sql += "                         , ismodified\n"
  Sql += "                         , CASE WHEN isdefault||ismodified = 'TrueFalse'\n"
  Sql += "                                THEN 'False'\n"
  Sql += "                                ELSE 'True'\n"
  Sql += "                           END isset\n"
  Sql += "                      FROM ( SELECT DECODE(substr(i.ksppinm,1,1),'_','Y','N') hidden\n"
  Sql += "                                  , sv.con_id con_id\n"
  Sql += "                                  , i.ksppinm name\n"
  Sql += "                                  , sv.ksppstvl value\n"
  Sql += "                                  , INITCAP(sv.ksppstdf) isdefault\n"
  Sql += "                                  , DECODE(BITAND(sv.ksppstvf,7),1,'TRUE',4,'True','False') ismodified\n"
  Sql += "                               FROM sys.x$ksppi  i\n"
  Sql += "                                  , sys.x$ksppsv sv\n"
  Sql += "                              WHERE i.indx = sv.indx\n"
  Sql += "                           )\n"
  Sql += "                  )\n"
  if (Filter != ''):   
    Sql += "            WHERE " + Filter
  Sql += "            ORDER BY hidden\n"
  Sql += "                , replace(name,'_','')\n"
  Sql += "         ) parms\n"
  Sql += "       , ( SELECT con_id con_id, name con_name from v$pdbs\n"
  Sql += "            UNION\n"
  Sql += "           SELECT 0 con_id, '$ROOT' con_name from dual\n"
  Sql += "         ) dbs\n"
  Sql += "   WHERE dbs.con_id = parms.con_id\n"
  Sql += "ORDER BY con_name, name, value;"


  Sql = Sql.strip()
  
  if(Show):
    print('-----------cut-----------cut-----------cut-----------cut-----------cut-----------')
    print(Sql)
    print('-----------cut-----------cut-----------cut-----------cut-----------cut-----------')
    exit()

  # Parse the connect string if any, prompt for username, password if needed.
  if (len(args) > 0):
    InStr = args[0]
    ConnStr = ParseConnectString(InStr)
    if (not(ConnStr.upper().find(' AS SYSDBA') >= 0)):
      ConnStr += ' AS SYSDBA'
    
  if(All):
    for Inst in InstList:
      print("\n>> %s\n" % Inst)

      (OracleSid,OracleHome) = SetOracleEnv(Inst)

      if (not OracleHome):
        print("ORACLE_HOME not found for: %s. Verify the instance has an entry in the /etc/oratab file.\n" % Inst)
      else:
        # Execute the report
        if (ConnStr != ''):
          (Stdout) = RunSqlplus(Sql, ErrChk, ConnStr)
        else:
          (Stdout) = RunSqlplus(Sql, ErrChk)
        
        Stdout = Stdout.strip()
        
        # Print the report
        if (Stdout != ''):
          print('%s\n' % Stdout)
  else:
    # Check/setup the Oracle environment
    if (not('ORACLE_SID' in list(environ.keys()))):
      print('ORACLE_SID is required.')
      exit(1)
    else:
      # Set the ORACLE_HOME just in case it isn't set already.
      if (not('ORACLE_HOME' in list(environ.keys()))):
        (OracleSid, OracleHome) = SetOracleEnv(environ['ORACLE_SID'])
   
    # Execute the report
    if (ConnStr != ''):
      (Stdout) = RunSqlplus(Sql, ErrChk, ConnStr)
    else:
      (Stdout) = RunSqlplus(Sql, ErrChk)
   
    # Print the report
    if (Stdout != ''):
      print('\n%s' % Stdout)


  exit(rc)
# --------------------------------------
# ---- End Main Program ----------------
# --------------------------------------
