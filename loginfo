#!/bin/env python

##################################################################################################
# Name:        loginfo                                                                           #
# Author:      Randy Johnson                                                                     #
# Description: Reports redolog information.                                                      #
#                                                                                                #
# Usage: loginfo [options]                                                                       #
#                                                                                                #
# Options:                                                                                       #
#   -h, --help  show this help message and exit                                                  #
#  --s         print SQL query.                                                                  #
#  --v         print version info.                                                               #
#                                                                                                #
# History:                                                                                       #
#                                                                                                #
# Date       Ver. Who              Change Description                                            #
# ---------- ---- ---------------- ------------------------------------------------------------- #
# 09/06/2016 1.00 Randy Johnson    Initial write.                                                #
##################################################################################################

# --------------------------------------
# ---- Import Python Modules -----------
# --------------------------------------
from optparse     import OptionParser
from os           import environ
from os.path      import basename
from sys          import argv
from sys          import exit
from sys          import version_info
from signal       import SIGPIPE
from signal       import SIG_DFL
from signal       import signal
from Oracle       import RunSqlplus
from Oracle       import SetOracleEnv
from Oracle       import ParseConnectString


# --------------------------------------
# ---- Main Program --------------------
# --------------------------------------
if (__name__ == '__main__'):
  Cmd            = basename(argv[0]).split('.')[0]
  CmdDesc        = 'Redolog Info.'
  Version        = '1.00'
  VersionDate    = 'Thu Oct 6 12:29:39 MDT 2016'
  DevState       = 'Production'
  Banner         = CmdDesc + ': Release ' + Version + ' '  + DevState + '. Last updated: ' + VersionDate
  Sql            = ''
  SqlHeader      = '/***** ' + CmdDesc.upper() + ' *****/'
  ErrChk         = False
  ArgParser      = OptionParser()
  InStr          = ''
  ConnStr        = ''

  # For handling termination in stdout pipe; ex: when you run: oerrdump | head
  signal(SIGPIPE, SIG_DFL)

  # Process command line options
  # ----------------------------------
  Usage  =  '%s [options]'  % Cmd
  Usage += '\n\n%s'         % CmdDesc
  Usage += '\n-------------------------------------------------------------------------------'
  Usage += '\nReport online redo log information.'
  ArgParser = OptionParser(Usage)

  ArgParser.add_option('--s', dest='Show',     action='store_true', default=False,           help="print SQL query.")
  ArgParser.add_option('--v', dest='ShowVer',  action='store_true', default=False,           help="print version info.")

  # Parse command line arguments
  Options, args = ArgParser.parse_args()
  argc = len(args)

  Show     = Options.Show
  ShowVer  = Options.ShowVer

  if (ShowVer):
    print('\n%s' % Banner)
    exit()

  Sql += "column thread#        format 999              heading 'Thread'\n"
  Sql += "column group#         format 999              heading 'Group'\n"
  Sql += "column sequence#      format 999              heading 'Seq'\n"
  Sql += "column bytes          format 999,999,999,999  heading 'Bytes'\n"
  Sql += "column blocksize      format 9999             heading 'Blocksize'\n"
  Sql += "column members        format 999              heading 'Members'\n"
  Sql += "column archived       format a8               heading 'Archived'\n"
  Sql += "column status         format a10              heading 'Status'\n"
  Sql += "column first_change#  format 9999999999999999 heading 'First Change Num'\n"
  Sql += "column first_time     format a19              heading 'First Change Time'\n"
  Sql += "column next_change#   format 9999999999999999 heading 'Next Change Num'\n"
  Sql += "column next_time      format a19              heading 'Next Change Time'\n"
  Sql += "column con_id         format 99999            heading 'Con ID'\n"
  Sql += "\n"
  Sql += "prompt V$LOG\n"
  Sql += "\n"
  Sql += "  SELECT " + SqlHeader + "\n"
  Sql += "         thread#\n"
  Sql += "       , group#\n"
  Sql += "       , sequence#\n"
  Sql += "       , bytes\n"
  Sql += "       , blocksize\n"
  Sql += "       , members\n"
  Sql += "       , archived\n"
  Sql += "       , status\n"
  Sql += "       , first_change#\n"
  Sql += "       , TO_CHAR(first_time, 'yyyy-mm-dd hh24:mi:ss') first_time\n"
  Sql += "       , next_change#\n"
  Sql += "       , TO_CHAR(next_time, 'yyyy-mm-dd hh24:mi:ss') next_time\n"
  Sql += "       , con_id\n"
  Sql += "    FROM v$log\n"
  Sql += "ORDER BY thread#\n"
  Sql += "       , group#;\n\n\n"

  Sql += "column thread#        format 999              heading 'Thread'\n"
  Sql += "column group#         format 999              heading 'Group'\n"
  Sql += "column sequence#      format 999              heading 'Seq'\n"
  Sql += "column bytes          format 999,999,999,999  heading 'Bytes'\n"
  Sql += "column blocksize      format 9999             heading 'Blocksize'\n"
  Sql += "column used           format 999999           heading 'Used'\n"
  Sql += "column archived       format a8               heading 'Archived'\n"
  Sql += "column status         format a10              heading 'Status'\n"
  Sql += "column first_change#  format 9999999999999999 heading 'First Change Num'\n"
  Sql += "column first_time     format a19              heading 'First Change Time'\n"
  Sql += "column next_change#   format 9999999999999999 heading 'Next Change Num'\n"
  Sql += "column next_time      format a19              heading 'Next Change Time'\n"
  Sql += "column con_id         format 99999            heading 'Con ID'\n"
  Sql += "column dbid           format a12              heading 'Db ID'\n"
  Sql += "\n"
  Sql += "prompt \n"
  Sql += "prompt \n"
  Sql += "prompt V$STANDBY_LOG\n"
  Sql += "\n"
  Sql += "  SELECT " + SqlHeader + "\n"
  Sql += "         thread#\n"
  Sql += "       , group#\n"
  Sql += "       , sequence#\n"
  Sql += "       , bytes\n"
  Sql += "       , blocksize\n"
  Sql += "       , used\n"
  Sql += "       , archived\n"
  Sql += "       , status\n"
  Sql += "       , first_change#\n"
  Sql += "       , TO_CHAR(first_time, 'yyyy-mm-dd hh24:mi:ss') first_time\n"
  Sql += "       , next_change#\n"
  Sql += "       , TO_CHAR(next_time, 'yyyy-mm-dd hh24:mi:ss') next_time\n"
  Sql += "       , con_id\n"
  Sql += "       , dbid\n"
  Sql += "    FROM v$standby_log\n"
  Sql += "ORDER BY thread#\n"
  Sql += "       , group#;\n\n\n"

  Sql += "column group#                format 999   heading 'Group'\n"
  Sql += "column type                  format a20   heading 'Type'\n"
  Sql += "column members               format 999   heading 'Members'\n"
  Sql += "column is_recovery_dest_file format a3    heading 'FRA'\n"
  Sql += "column con_id                format 99999 heading 'Con ID'\n"
  Sql += "\n"
  Sql += "prompt \n"
  Sql += "prompt \n"
  Sql += "prompt V$LOGFILE\n"
  Sql += "\n"
  Sql += "  SELECT " + SqlHeader + "\n"
  Sql += "         group#\n"
  Sql += "       , status\n"
  Sql += "       , type\n"
  Sql += "       , member\n"
  Sql += "       , is_recovery_dest_file\n"
  Sql += "       , con_id\n"
  Sql += "    FROM v$logfile\n"
  Sql += "ORDER BY group#;\n"

  if(Show):
    print('-----------cut-----------cut-----------cut-----------cut-----------cut-----------')
    print(Sql)
    print('-----------cut-----------cut-----------cut-----------cut-----------cut-----------')
    exit()

  # Check/setup the Oracle environment
  if (not('ORACLE_SID' in list(environ.keys()))):
    print('ORACLE_SID is required.')
    exit(1)
  else:
    # Set the ORACLE_HOME just in case it isn't set already.
    if (not('ORACLE_HOME' in list(environ.keys()))):
      (OracleSid, OracleHome) = SetOracleEnv(environ['ORACLE_SID'])

  # Parse the connect string if any, prompt for username, password if needed.
  if (len(args) > 0 and not Show):
    InStr = args[0]
    ConnStr = ParseConnectString(InStr)

  # Execute the report
  if (ConnStr != ''):
    (Stdout) = RunSqlplus(Sql, ErrChk, ConnStr)
  else:
    (Stdout) = RunSqlplus(Sql, ErrChk)

  # Print the report
  if (Stdout != ''):
    print('\n%s' % Stdout)

  exit(0)
# --------------------------------------
# ---- End Main Program ----------------
# --------------------------------------